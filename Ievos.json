[{
  "id": 3,
  "typeString": "struct",
  "properties": [
    {
  "name": "let startColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let endColor",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Gradient"
},{
  "id": 5,
  "typeString": "enum",
  "cases": [
    {
  "name": "leftToRight case topToBottom"
}
  ],
  "name": "Direction"
},{
  "id": 6,
  "typeString": "struct",
  "properties": [
    {
  "name": "let direction: Direction",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let firstColor: UIColor",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let secondColor: UIColor",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GradientInfo",
  "containedEntities": [
    5
  ]
},{
  "id": 27,
  "typeString": "enum",
  "methods": [
    {
  "name": "init(withCode code: Int)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "noInternet"
},
    {
  "name": "generic"
},
    {
  "name": "canceled"
},
    {
  "name": "emailAlreadyInUse"
},
    {
  "name": "wrongPassword"
},
    {
  "name": "userNotFound"
},
    {
  "name": "accountExistsWithDifferentCredential"
},
    {
  "name": "network"
},
    {
  "name": "credentialAlreadyInUse"
}
  ],
  "name": "ErrorType",
  "superClass": 255
},{
  "id": 30,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDefaultSpanDistance: CLLocationDistance",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "openAppleMapsDirectionsTo(_ location: LocationEntity)",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "DirectionsTools",
  "superClass": 256
},{
  "id": 31,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSunriseSunsetTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kGoldenHourTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kMorningAfternoonTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kNoonTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kCloudyDayTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kCloudyEveningMonringTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kTwilightTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kClearBlueSkyTemperature: CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kNightColor",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "var nightColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var twilightColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var sunriseSunsetColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var goldenHourColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var morningAfternoonColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var noonColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var overcastEveningMorningColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var overcastDayColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var clearBlueSkyColor: UIColor",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "gradientColorPair(withDate date: Date, coordinate: CLLocationCoordinate2D, weatherId: Int) -> (UIColor, UIColor)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "agendaGradientValue(startColor: UIColor, endColor: UIColor, startTime: TimeInterval, endTime: TimeInterval, agendaTime: TimeInterval) -> UIColor",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "daylightColorFromDate(_ date: Date, atCoordinate coordinate: CLLocationCoordinate2D, withWeatherId weatherId: Int) -> UIColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "clampColorComponent(_ component: CGFloat) -> CGFloat",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "colorFromTemperature(_ temperature: CGFloat) -> UIColor",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "name": "ColorTemperatureTools",
  "superClass": 256
},{
  "id": 32,
  "typeString": "class",
  "methods": [
    {
  "name": "loadImagesWithLocalIdentifierList(_ localIdentifierList: [String], imageSize: CGSize, resultsHandler: @escaping (_ image: UIImage, _ imageAsset: PHAsset) -> Void)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "loadSquareImagesWithLocalIdentifiersList(_ localIdentifierList: [String], imageSize: CGSize, resultsHandler: @escaping (_ image: UIImage, _ imageAsset: PHAsset) -> Void)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "loadSquareImagesFromFetchResults(_ fetchResultList: [PHAsset], imageSize: CGSize, resultsHandler: @escaping (_ image: UIImage, _ imageAsset: PHAsset) -> Void)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "loadPhotoAlbumFromAssetCollection(_ assetCollection: PHAssetCollection, imageSize: CGSize, resultsHandler: @escaping (_ image: UIImage, _ fetchResult: PHFetchResult<PHAsset>) -> Void)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "assetsCountInAssetCollection(_ assetCollection: PHAssetCollection) -> Int",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "cropToSquareImageRequestOptionsForAsset(_ asset: PHAsset) -> PHImageRequestOptions",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "exactResizeModeImageRequestOptions() -> PHImageRequestOptions",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "fetchMyPhotoStreamAssetsWithLocalIdentifierList(_ identifierList: [String]) -> [PHAsset]",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "name": "ImageManagerTools",
  "superClass": 256
},{
  "id": 33,
  "typeString": "class",
  "properties": [
    {
  "name": "let kAbsoluteZeroInCelsius",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kAbsoluteZeroInFarenheit",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kMilesToKilometerRatio",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kFeetPerMeterRatio",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_celsius",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_fahrenheit",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_kelvin",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_kilometer",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_mile",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_metersPerSecond",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kUnits_feetPerSecond",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "celsius(fromKelvin kelvin: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "celsius(fromFahrenheit fahrenheit: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "fahrenheit(fromKelvin kelvin: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "fahreinheit(fromCelsius celsius: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "kelvin(fromCelsius celsius: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "kelvin(fromFahrenheit fahrenheit: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forCelsius celsius: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forFahrenheit fahrenheit: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forKelvin kelvin: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "miles(fromKilometers kilometers: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "kilometers(fromMiles miles: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forKilometers kilometers: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forMiles miles: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "feetPerSecond(fromMetersPerSecond meters: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "metersPerSecond(fromFeetPerSecond feet: Double) -> Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forMetersPerSecond meters: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formattedString(forFeetPerSecond feet: Double) -> String",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "UnitConversionTools",
  "superClass": 256
},{
  "id": 34,
  "typeString": "class",
  "methods": [
    {
  "name": "daysToDate(_ date: Date) -> Int",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "dateComponents(from timeInterval: TimeInterval) -> DateComponents",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "hourAndMinuteInterval(fromFullDateInterval fullInterval: TimeInterval) -> TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "startOfDayDate(for date: Date, with timeZone: TimeZone? = nil) -> Date",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "middleOfDayForDate(_ date: Date, withTimeZone timeZone: TimeZone? = nil) -> Date",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "dayNumberStringFromTimeInterval(_ timeInterval: TimeInterval) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "localizedDayString(forDayNumber dayNumber: Int) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "string(for timeInterval: TimeInterval) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "string(for date: Date?) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "date(from timeInterval: TimeInterval) -> Date",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "timeInterval(from date: Date) -> TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "localizedShortTimeStringForDate(_ date: Date, withTimeZone timeZone: TimeZone? = nil) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "localizedLongDateString(for date: Date, with timeZone: TimeZone? = nil) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "localizedShortDateString(for date: Date, with timeZone: TimeZone? = nil) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "timeZoneStringForDate(_ date: Date, withTimeZone timeZone: TimeZone? = nil) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "localizedDateStringWith(dateFormatter: DateFormatter?, date: Date, timeZone: TimeZone?) -> String",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "name": "TimeTools",
  "superClass": 256
},{
  "id": 35,
  "typeString": "class",
  "properties": [
    {
  "name": "var messageCompletionHandler: ((_ success: Bool, _ message: String?) -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mailCompletionHandler: ((_ success: Bool, _ error: Error?) -> Void)? @objc @objc @objc",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "makeCallToNumber(_ number: String)",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "presentMessageComposeViewControllerWithNumber(_ number: String, presentOnController controller: UIViewController, completionHandler: @escaping (_ success: Bool, _ message: String?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "presentMailComposeViewController(mailTo emailAddressList: [String], subject: String = , presentOn controller: UIViewController, completionHandler: @escaping (_ success: Bool, _ message: Error?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "messageComposeViewController(_ controller: MFMessageComposeViewController, didFinishWith result: MessageComposeResult)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ComposeTools",
  "superClass": 256
},{
  "id": 36,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDegToRad: Double",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kEarthRadiusInMeters: Double",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kLatitudeCoordinateLimit: Double",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let kLongitudeCoordinateLimit: Double",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "directMetersFromCoordinate(_ from: CLLocationCoordinate2D, toCoordinate to: CLLocationCoordinate2D) -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "geoPoint(fromLatitude latitude: Double, longitude: Double) -> GeoPoint?",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "CoordinateTools",
  "superClass": 256
},{
  "id": 37,
  "typeString": "enum",
  "cases": [
    {
  "name": "FailedToCreateWithAddress"
},
    {
  "name": "FailedToCreateWithHostname"
},
    {
  "name": "UnableToSetCallback case UnableToSetDispatchQueue"
}
  ],
  "name": "ReachabilityError",
  "superClass": 257
},{
  "id": 38,
  "typeString": "enum",
  "properties": [
    {
  "name": "var description: String",
  "type": "instance",
  "accessLevel": "public"
}
  ],
  "cases": [
    {
  "name": "notReachable"
},
    {
  "name": "reachableViaWiFi"
},
    {
  "name": "reachableViaWWAN public var description"
}
  ],
  "name": "NetworkStatus",
  "superClass": 258
},{
  "id": 39,
  "typeString": "enum",
  "properties": [
    {
  "name": "var description: String",
  "type": "instance",
  "accessLevel": "public"
}
  ],
  "cases": [
    {
  "name": "none"
},
    {
  "name": "wifi"
},
    {
  "name": "cellular public var description"
}
  ],
  "name": "Connection",
  "superClass": 258
},{
  "id": 40,
  "typeString": "class",
  "properties": [
    {
  "name": "var whenReachable: NetworkReachable?",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var whenUnreachable: NetworkUnreachable? @available(*, deprecated, renamed: )",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "let reachableOnWWAN: Bool",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var allowsCellularConnection: Bool",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var notificationCenter: NotificationCenter",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var currentReachabilityString: String",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var currentReachabilityStatus: Connection",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var connection: Connection",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "var connection",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var previousFlags: SCNetworkReachabilityFlags?",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var isRunningOnDevice: Bool",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var notifierRunning",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "let reachabilityRef: SCNetworkReachability",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "let reachabilitySerialQueue",
  "type": "instance",
  "accessLevel": "fileprivate"
}
  ],
  "methods": [
    {
  "name": "init(reachabilityRef: SCNetworkReachability)",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "init?(hostname: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?()",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "Reachability",
  "containedEntities": [
    38,
    39
  ],
  "extensions": [
    41,
    42
  ]
},{
  "id": 43,
  "typeString": "protocol",
  "properties": [
    {
  "name": "var name: Notification.Name",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "NotificationPostable",
  "extensions": [
    44,
    47
  ]
},{
  "id": 48,
  "typeString": "class",
  "methods": [
    {
  "name": "is24hourLocale() -> Bool",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "LocalizationTools",
  "superClass": 256
},{
  "id": 49,
  "typeString": "class",
  "methods": [
    {
  "name": "loadViewFromXib(xibName: String, classType: UIView.Type) -> UIView?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "loadViewFromXibOfClass(_ classType: UIView.Type) -> UIView?",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "XibLoader",
  "superClass": 256
},{
  "id": 50,
  "typeString": "class",
  "properties": [
    {
  "name": "let operationQueue",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "getForecast(for date: Date, coordinate: CLLocationCoordinate2D, completion: @escaping (ForecastEntity?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "fetchForecast(date: Date, coordinate: CLLocationCoordinate2D, completion: @escaping (ForecastEntity?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "handleGetForecastOperation(_ operation: GetForecastOperation, completion: @escaping (ForecastEntity?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "handleGetForecastOutput(_ output: GetForecastOutput?, completion: @escaping (ForecastEntity?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "cachedForecastList() -> [ForecastEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "forecast(forDate date: Date, coordinate: CLLocationCoordinate2D, fromForecastList forecastList: [ForecastEntity]) -> ForecastEntity?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "ForecastDataModel",
  "superClass": 256
},{
  "id": 51,
  "typeString": "struct",
  "properties": [
    {
  "name": "let units: UnitsEntity",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    43
  ],
  "name": "SettingsDataModelLoadedUnits"
},{
  "id": 52,
  "typeString": "struct",
  "properties": [
    {
  "name": "let location: LocationEntity",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    43
  ],
  "name": "SettingsDataModelLoadedHomeLocation"
},{
  "id": 54,
  "typeString": "class",
  "properties": [
    {
  "name": "var instance: SettingsDataModel?",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "var shared: SettingsDataModel",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let shared",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var units",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var homeLocation",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: SettingsRepository?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "resetUserSettings()",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "checkIfFinishedOnboarding(completion: @escaping (Bool) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setTemperature(_ temperature: TemperatureUnitType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setDistance(_ distance: DistanceUnitType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveUnits()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setHomeLocation(_ homeLocation: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveHomeLocation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "settingsRepository(_ repository: SettingsRepository, loadedUnits units: UnitsEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "settingsRepository(_ repository: SettingsRepository, loadedHomeLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "protocols": [
    72
  ],
  "name": "SettingsDataModel"
},{
  "id": 55,
  "typeString": "class",
  "properties": [
    {
  "name": "var functions",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "configure()",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "deleteAccount(_ completion: @escaping (Error?) -> Void)",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "FirebaseManager"
},{
  "id": 56,
  "typeString": "class",
  "properties": [
    {
  "name": "let shared",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var user: User?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isUserSignedIn: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isUserSignedInWithAccount: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isUserSignedInAnonymously: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var userEmail: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "signOut(_ completion: (() -> Void)?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteAccount(_ completion: @escaping (Bool) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPassword(withEmail email: String, completion: @escaping (Bool, Error?) -> Void )",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "finishedPasswordReset(with error: Error?, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "signUp(withEmail email: String, password: String, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "completeSignUp(withError error: Error?, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sendEmailVerification(_ completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "completeEmailVerification(with error: Error?, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "signInAnonymously(withCompletion handler: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signIn(withEmail email: String, password: String, emailNotVerified notVerifiedHandler: @escaping () -> Void, signedIn signedInHandler: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signIn(with credential: AuthCredential, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signOutFromProviders()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "linkAnonymousAccountAndSignIn(with credential: AuthCredential, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "handleAuthDataResult(_ authDataResult: AuthDataResult?, error: Error?, completion: @escaping (Bool, Error?) -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AuthenticationManager"
},{
  "id": 57,
  "typeString": "protocol",
  "methods": [
    {
  "name": "facebookSignInManagerStartedSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManagerCanceledSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManagerFailedSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManager(_ manager: FacebookSignInManager, finishedSignInWith credential: AuthCredential)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "FacebookSignInManagerDelegate",
  "superClass": 259
},{
  "id": 58,
  "typeString": "class",
  "properties": [
    {
  "name": "let loginManager",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: FacebookSignInManagerDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "signInWithFacebookForViewController(_ viewController: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signOutCurrentUser()",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "FacebookSignInManager"
},{
  "id": 59,
  "typeString": "protocol",
  "methods": [
    {
  "name": "googleSignInManagerStartedSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerCancelledSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerTookOverSignInFlow(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerFailedSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, finishedSignInWith credential: AuthCredential)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, presentViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, dismissViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GoogleSignInManagerDelegate",
  "superClass": 259
},{
  "id": 60,
  "typeString": "class",
  "properties": [
    {
  "name": "let kUserCancelledSignInErrorCode: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var delegate: GoogleSignInManagerDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "setPresentingViewController(_ controller: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signIn()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signOut()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sign(inWillDispatch signIn: GIDSignIn!, error: Error!)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sign(_ signIn: GIDSignIn!, present viewController: UIViewController!)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sign(_ signIn: GIDSignIn!, dismiss viewController: UIViewController!)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GoogleSignInManager",
  "superClass": 256
},{
  "id": 61,
  "typeString": "protocol",
  "methods": [
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgendaList agendaList: [AgendaEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, deletedAgenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaRepositoryDelegate",
  "superClass": 259,
  "extensions": [
    63
  ]
},{
  "id": 62,
  "typeString": "class",
  "properties": [
    {
  "name": "let eventId: String",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let agendaCollection: CollectionReference?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var listener: ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: AgendaRepositoryDelegate? convenience convenience deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "addAgenda(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateAgenda(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteAgenda(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listenerRegistration() -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaListenerRegistration(id: String) -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processAgendaCollection(_ query: QuerySnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processAgenda(_ documentSnapshot: DocumentSnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(eventId: String, delegate: AgendaRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withEvent event: EventEntity, delegate: AgendaRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withAgenda agenda: AgendaEntity, delegate: AgendaRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaRepository"
},{
  "id": 64,
  "typeString": "protocol",
  "methods": [
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNoteList noteList: [NoteEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, deletedNoteWithId id: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteRepositoryDelegate",
  "superClass": 259,
  "extensions": [
    66
  ]
},{
  "id": 65,
  "typeString": "class",
  "properties": [
    {
  "name": "let eventId: String",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noteCollection: CollectionReference?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var listener: ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: NoteRepositoryDelegate? convenience convenience deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "addNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listListenerRegistration() -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "noteListenerRegistration(noteId: String) -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processNoteCollection(querySnapshot: QuerySnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "noteList(from documentList: [QueryDocumentSnapshot]) -> [NoteEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processNote(documentSnapshot: DocumentSnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(eventId: String, delegate: NoteRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(forListWithEventId eventId: String, delegate: NoteRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(forNote note: NoteEntity, delegate: NoteRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteRepository"
},{
  "id": 67,
  "typeString": "protocol",
  "properties": [
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "init?(with dataDict: [String: Any], id: String?, ownerId: String?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "Firestorable"
},{
  "id": 68,
  "typeString": "class",
  "properties": [
    {
  "name": "var users: CollectionReference",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "var userDocument: DocumentReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let userId",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var settingsCollection: CollectionReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var unitsDocument: DocumentReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var homeLocationDocument: DocumentReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var eventCollection: CollectionReference?",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "eventDocument(withId eventId: String) -> DocumentReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "agendaCollection(withEventId eventId: String) -> CollectionReference?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "noteCollection(withEventId eventId: String) -> CollectionReference?",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "FirestoreRepository"
},{
  "id": 69,
  "typeString": "protocol",
  "methods": [
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEventList eventList: [EventEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEvent event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventRepositoryDelegate",
  "superClass": 259,
  "extensions": [
    71
  ]
},{
  "id": 70,
  "typeString": "class",
  "properties": [
    {
  "name": "let eventCollection: CollectionReference?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var listener: ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: EventRepositoryDelegate? deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "addEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listListenerRegistration() -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "listenerRegistration(forEvent event: EventEntity) -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processEventCollection(_ querySnapshot: QuerySnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "eventList(from documentList: [QueryDocumentSnapshot]) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "processEvent(documentSnapshot: DocumentSnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(forListWithDelegate delegate: EventRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(forEvent event: EventEntity, delegate: EventRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventRepository"
},{
  "id": 72,
  "typeString": "protocol",
  "methods": [
    {
  "name": "settingsRepository(_ repository: SettingsRepository, loadedUnits units: UnitsEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "settingsRepository(_ repository: SettingsRepository, loadedHomeLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SettingsRepositoryDelegate",
  "superClass": 259
},{
  "id": 73,
  "typeString": "class",
  "properties": [
    {
  "name": "let unitsDocument: DocumentReference?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let homeLocationDocument: DocumentReference?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var unitListener: ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var locationListener: ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: SettingsRepositoryDelegate? deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "checkIfFinishedOnboarding(completionHandler: @escaping (_ hasFinishedOnboarding: Bool) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveUnits(_ units: UnitsEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveHomeLocation(_ location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "unitListenerRegistration() -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "homeLocationListenerRegistration() -> ListenerRegistration?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedUnits(_ documentSnapshot: DocumentSnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedHomeLocation(_ documentSnapshot: DocumentSnapshot?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withDelegate delegate: SettingsRepositoryDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SettingsRepository"
},{
  "id": 74,
  "typeString": "struct",
  "properties": [
    {
  "name": "let id",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let didFinishOnboarding",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let didSuggestToSignUpForAnonymous",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let upcomingEventsCreatedCount",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let didAskToRateApp",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let didRateApp",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "User"
},{
  "id": 75,
  "typeString": "struct",
  "properties": [
    {
  "name": "let wasPrivacyPolicyAgreedTo",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let wasApplicationLaunchedBefore",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let forecastList",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Key",
  "containedEntities": [
    74
  ]
},{
  "id": 76,
  "typeString": "class",
  "properties": [
    {
  "name": "let kUpcomingEventCountNeededToRateApp: Int",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let didAskToRateApp",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let didRateApp",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let forecastList",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let userDefaults",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "let keychain",
  "type": "type",
  "accessLevel": "private"
},
    {
  "name": "var wasApplicationLaunchedBefore: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var wasPrivacyPolicyAgreedTo: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var userId: String?",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var didUserFinishOnboarding: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var didSuggestToSignUpForAnonymous: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var canUserRateApp: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var didAskUserToRateApp: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var upcomingEventsCreatedCount: Int",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var didUserRateApp: Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var forecastList: [ForecastEntity]",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let encodedData: Data",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let object: Any",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let forecastList",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let encodedData: Data",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "resetUserData()",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "resetAllData()",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "rescheduleRateAppRequest()",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "LocalStorageRepository",
  "containedEntities": [
    74,
    75
  ]
},{
  "id": 77,
  "typeString": "class",
  "properties": [
    {
  "name": "var defaultDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dateFormatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weekdayWithDateDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dateFormatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dateWithTimeDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dateFormatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var shortTimeDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let formatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var longDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let formatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var shortDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let formatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var timeZoneDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var weekdayDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var gmtShortTimeFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let formatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var gmtShortDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let formatter",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dateAndTimeConversionDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var dateConversionDateFormatter: DateFormatter",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "dateFormatter(withTimeZone timeZone: TimeZone? = nil, withFormatString formatString: String) -> DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "formatterForDateComponentsConversion(withTimeZone timeZone: TimeZone? = nil) -> DateFormatter",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "timeConversionDateFormatter(withTimeZone timeZone: TimeZone? = nil) -> DateFormatter",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "DateFormattersRepository"
},{
  "id": 78,
  "typeString": "class",
  "properties": [
    {
  "name": "var date: Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var coordinate: CLLocationCoordinate2D",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "init(coordinate: CLLocationCoordinate2D, date: Date)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GetForecastInput"
},{
  "id": 79,
  "typeString": "class",
  "methods": [
    {
  "name": "createOutput() -> TSMBaseOperationOutput",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "urlMethodName() -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "httpMethod() -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "additionalUrlParametersDictionary() -> [String: String]?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "parseResponseDict(_ responseDict: [String: Any])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "output() -> GetForecastOutput",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GetForecastOperation",
  "superClass": 81
},{
  "id": 80,
  "typeString": "class",
  "properties": [
    {
  "name": "var forecastList: [ForecastEntity]?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "input() -> GetForecastInput?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "GetForecastOutput",
  "superClass": 82
},{
  "id": 81,
  "typeString": "class",
  "properties": [
    {
  "name": "var urlSession: URLSession?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sessionDataTask: URLSessionDataTask?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "cancel()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startOperation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "finishOperation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "urlMethodName() -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "httpMethod() -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "additionalUrlParametersDictionary() -> [String: String]?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "additionalBodyDictionary() -> [NSString: Any]?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isSuccessfulOnEmptyResponse() -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "parseResponseDict(_ responseDict: [String: Any])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "parseErrorData(_ data: Data?, withFailedResponse response: HTTPURLResponse)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: @escaping (URLSession.AuthChallengeDisposition, URLCredential?) -> Swift.Void)",
  "type": "instance",
  "accessLevel": "public"
},
    {
  "name": "didFinishDataTaskWith(data: Data?, response: URLResponse?, error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "parseRetrievedData(_ data: Data?, withResponse response: URLResponse?, withError error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "operationUrl() -> URL?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "urlParametersQueryItemsList() -> [URLQueryItem]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "commonUrlParametersDictionary() -> [String: String]?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "httpBodyData() -> Data?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "commonBodyDictionary() -> [String: String]?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "TSMBaseServerOperation",
  "superClass": 83
},{
  "id": 82,
  "typeString": "class",
  "properties": [
    {
  "name": "var input: Any?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isSuccessful: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "TSMBaseOperationOutput"
},{
  "id": 83,
  "typeString": "class",
  "properties": [
    {
  "name": "var input: Any?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var output: TSMBaseOperationOutput!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var _executing: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var _finished: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isExecuting: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isFinished: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isAsynchronous: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "cancel()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "start()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "automaticallyNotifiesObservers(forKey key: String) -> Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "createOutput() -> TSMBaseOperationOutput",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startOperation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "finishOperation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withInput input: Any? = nil)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "TSMBaseOperation"
},{
  "id": 84,
  "typeString": "struct",
  "properties": [
    {
  "name": "let id",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let email",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "App"
},{
  "id": 85,
  "typeString": "struct",
  "properties": [
    {
  "name": "let clientId",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let mapsApiKey",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Google"
},{
  "id": 86,
  "typeString": "struct",
  "properties": [
    {
  "name": "let termsAndConditions",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let appStore",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let photoPlannerOnAppStore",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "UrlString"
},{
  "id": 87,
  "typeString": "struct",
  "properties": [
    {
  "name": "let min",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let max",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "PasswordLength"
},{
  "id": 88,
  "typeString": "struct",
  "properties": [
    {
  "name": "let defaultDegrees: Double",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let defaultCoordinate",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let defaultMapZoom: Float",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Location"
},{
  "id": 89,
  "typeString": "struct",
  "properties": [
    {
  "name": "let kilometersInMile",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Unit"
},{
  "id": 90,
  "typeString": "struct",
  "properties": [
    {
  "name": "let min",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let max",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "AvailableDate"
},{
  "id": 91,
  "typeString": "struct",
  "properties": [
    {
  "name": "let minuteInSeconds: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let hourInSeconds: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dayInSeconds: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let noonInSeconds: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let yearInDays: Int",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Time",
  "containedEntities": [
    90
  ]
},{
  "id": 92,
  "typeString": "struct",
  "properties": [
    {
  "name": "let onEventDay: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let oneToFiveDaysLeft: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "RefreshInterval"
},{
  "id": 93,
  "typeString": "struct",
  "properties": [
    {
  "name": "let apiKey: String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let distanceInMeters: Int",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let durationTimeInterval: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let timeIntervalWhenIsAvailable: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Forecast",
  "containedEntities": [
    92
  ]
},{
  "id": 94,
  "typeString": "struct",
  "properties": [
    {
  "name": "let timeoutInterval: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let headerContentType: String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let urlScheme: String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let urlHost: String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let baseUrlPath: String",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Operation"
},{
  "id": 95,
  "typeString": "struct",
  "properties": [
    {
  "name": "let gradient",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let buttonCornerRadius: CGFloat",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "UIDefaults"
},{
  "id": 96,
  "typeString": "struct",
  "properties": [
    {
  "name": "let duration: TimeInterval",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "Animation"
},{
  "id": 97,
  "typeString": "struct",
  "properties": [
    {
  "name": "let itemCount: Int",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let emptySpace: CGFloat",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "ImageRow"
},{
  "id": 98,
  "typeString": "struct",
  "name": "Constants",
  "containedEntities": [
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97
  ]
},{
  "id": 99,
  "typeString": "enum",
  "cases": [
    {
  "name": "temperature"
},
    {
  "name": "distance"
}
  ],
  "name": "UnitType",
  "superClass": 255
},{
  "id": 100,
  "typeString": "class",
  "properties": [
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isOnboarding: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: SettingsDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var activeUnitType: UnitType",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var viewToDisplayPickerOn: UIView? required @objc",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveUnits()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "stringPickerViewController(_ viewController: StringPickerViewController, didSelectIndex index: Int, withValue value: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startObservingNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedUnits(_ notification: Notification)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(isForInitialSettings isOnboarding: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    261,
    262,
    116
  ],
  "name": "GeneralPreferencesViewController",
  "superClass": 260,
  "containedEntities": [
    99
  ]
},{
  "id": 101,
  "typeString": "class",
  "properties": [
    {
  "name": "var addressLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var searchOrClearAddressButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapContainerViewPlaceholder: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapContainerView: MapContainerView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isOnboarding: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: SettingsDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var controllerToPresentSearchControllerOn: UIViewController? required",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillDisappear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "editAddressButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "searchOrResetAdressButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveHomeLocation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(_ viewController: LocationSearchViewController, didSelect location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(didPressDismissButtonFor viewController: LocationSearchViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpAddressViews()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpMapContainerView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showLocationSearchViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateLocation(_ location: LocationEntity, shouldUpdateMap: Bool = true)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "startObservingNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedUpdatedLocation(_ notification: Notification)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateLocationViews(with location: LocationEntity, shouldUpdateMap: Bool = true)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(isForInitialSettings isOnboarding: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "HomeLocationViewController",
  "superClass": 260
},{
  "id": 102,
  "typeString": "class",
  "properties": [
    {
  "name": "var nameLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var descriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var hintLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateCell(withTitle title: String, description: String = )",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SettingsCell",
  "superClass": 263
},{
  "id": 103,
  "typeString": "enum",
  "cases": [
    {
  "name": "linkOrLogOut"
},
    {
  "name": "delete case count"
}
  ],
  "name": "AccountOptionSection",
  "superClass": 255
},{
  "id": 104,
  "typeString": "class",
  "properties": [
    {
  "name": "var isUserAnonymous: Bool",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "cell(withTitle title: String) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "linkOrLogOutAccount()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showConfirmationAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "logOut()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToSignInOptions()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showSignInToAnExistingAccountAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "signInToAnExistingAccount()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showAccountDeletionConfirmationAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "deleteAccount()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AccountOptionsViewController",
  "superClass": 264
},{
  "id": 105,
  "typeString": "enum",
  "cases": [
    {
  "name": "generalPreferences"
},
    {
  "name": "homeLocation case account case privacyPolicy"
}
  ],
  "name": "SettingsItemType",
  "superClass": 255
},{
  "id": 106,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let dataModel",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView! @objc",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "settingsCell(withTitle title: String, description: String = ) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "accountCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "openPrivacyPolicyUrlIfAble()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "startObservingNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "homeLocationDidUpdate()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SettingsViewController",
  "superClass": 260,
  "containedEntities": [
    105
  ]
},{
  "id": 107,
  "typeString": "protocol",
  "methods": [
    {
  "name": "customAlertViewController(_ viewController: CustomAlertViewController, withIdentifier identifier: String?, didTouchUpButtonWithIndex index: Int)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CustomAlertViewControllerDelegate",
  "superClass": 259
},{
  "id": 108,
  "typeString": "class",
  "properties": [
    {
  "name": "let kViewAnimationDuration: TimeInterval",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kBackgroundButtonAlphaValue: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kAlertViewCornerRadius: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var backgroundButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var customAlertView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: CustomAlertViewControllerDelegate?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var identifier: String? @objc",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var shouldDismissAutomatically",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpBackgroundButton()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "presentOverCurrentContext()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dismissViewController(completion: (() -> ())? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "slideIn()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "slideOutAndDismiss(completion: (() -> ())? = nil)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "customAlertViewWithOptionStringList(_ optionStringList: [String], title: String?) -> UIView",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "customAlertButtonClickedWithIndex(_ index: Int, button: CustomAlertButtonView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withDelegate delegate: CustomAlertViewControllerDelegate?, withIdentifier identifier: String?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withCustomAlertView customAlertView: UIView, withIdentifier identifier: String? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withAlertOptionStringList optionStringList: [String], withTitle title: String? = nil, withIdentifier identifier: String? = nil, delegate: CustomAlertViewControllerDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    110
  ],
  "name": "CustomAlertViewController",
  "superClass": 265
},{
  "id": 109,
  "typeString": "class",
  "properties": [
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateWithTitle(_ title: String)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CustomAlertTitleLabelView",
  "superClass": 266
},{
  "id": 110,
  "typeString": "protocol",
  "methods": [
    {
  "name": "customAlertButtonClickedWithIndex(_ index: Int, button: CustomAlertButtonView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CustomAlertButtonViewDelegate",
  "superClass": 259
},{
  "id": 111,
  "typeString": "class",
  "properties": [
    {
  "name": "var button: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var buttonIndex",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: CustomAlertButtonViewDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateWith(title: String, index: Int, delegate: CustomAlertButtonViewDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "buttonClicked(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "CustomAlertButtonView",
  "superClass": 266
},{
  "id": 112,
  "typeString": "protocol",
  "methods": [
    {
  "name": "datePickerViewController(_ viewController: DatePickerViewController, didSelectDate date: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "datePickerViewController(didClearDate viewController: DatePickerViewController)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "DatePickerViewControllerDelegate",
  "superClass": 259,
  "extensions": [
    114
  ]
},{
  "id": 113,
  "typeString": "class",
  "properties": [
    {
  "name": "let picker",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var shouldClearDate: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: DatePickerViewControllerDelegate? convenience convenience required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView() -> UIView",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpSelectButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpCancelButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with mode: UIDatePicker.Mode, date: Date, delegate: DatePickerViewControllerDelegate)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(asTimePickerWith date: Date, delegate: DatePickerViewControllerDelegate, minTime: TimeInterval = 0)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(asDatePickerWith date: Date, delegate: DatePickerViewControllerDelegate, shouldClearDate: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "DatePickerViewController",
  "superClass": 115
},{
  "id": 115,
  "typeString": "class",
  "properties": [
    {
  "name": "let kBackgroundButtonAlphaValue: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kViewAnimationDuration: TimeInterval",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var backgroundButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var selectButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var cancelButton: UIButton!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var contentView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var pickerPlaceholderView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var cancelButtonTopConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var roundedCornersBackgroundViewBottomConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var wasCancelButtonHidden",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView() -> UIView",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpSelectButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpCancelButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpBackgroundButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "presentOverCurrentContext()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dismissViewController(completion: (() -> ())? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "hideCancelButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "slideIn()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "slideOutAndDismiss(completion: (() -> ())? = nil)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "BasePickerViewController",
  "superClass": 265
},{
  "id": 116,
  "typeString": "protocol",
  "methods": [
    {
  "name": "stringPickerViewController(_ viewController: StringPickerViewController, didSelectIndex index: Int, withValue value: String?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "StringPickerViewControllerDelegate",
  "superClass": 259
},{
  "id": 117,
  "typeString": "class",
  "properties": [
    {
  "name": "let kPickerComponentHorizontalSpacing: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let picker",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var stringList: [String]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLayoutSubviews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView() -> UIView",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didTouchUpSelectButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "numberOfComponents(in pickerView: UIPickerView) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "pickerView(_ pickerView: UIPickerView, widthForComponent component: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "initialSelectionIndex = 0 private var selectedIndex = 0 private var selectedValue: String? private weak var delegate: StringPickerViewControllerDelegate? init(withStringList stringList: [String], selectedIndex: Int = 0, delegate: StringPickerViewControllerDelegate, identifier: String = )",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "StringPickerViewController",
  "superClass": 115
},{
  "id": 118,
  "typeString": "protocol",
  "methods": [
    {
  "name": "imageGalleryViewController(_ controller: ImageGalleryViewController, removedImageAtIndex index: Int)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ImageGalleryViewControllerDelegate",
  "superClass": 259
},{
  "id": 119,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSwipeTransitionDuration: TimeInterval",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kNoImagePlaceholderImageView",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var displayedImageIndex: Int",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageIdentifierList: [String]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageDictionary: [String: UIImage?]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: ImageGalleryViewControllerDelegate?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageView: UIImageView! required @objc @objc",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "didSwipeImageView(_ gesture: UIGestureRecognizer)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "loadImages()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "removeDisplayedImage()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateDisplayedImage()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateImageViewWithPlaceholder()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateImageViewWithImage(_ image: UIImage?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTitleWithDisplayedImageIndex()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "handleSwipeTo(_ direction: UISwipeGestureRecognizer.Direction)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "performImageTransitionWithSwipeDirection(_ direction: UISwipeGestureRecognizer.Direction)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showConfirmRemovalAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withSelectedImageAt index: Int, inImageIdentifierList imageIdentifierList: [String], delegate: ImageGalleryViewControllerDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ImageGalleryViewController",
  "superClass": 260
},{
  "id": 120,
  "typeString": "class",
  "properties": [
    {
  "name": "var photoAlbumList: [PhotoAlbumEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var savePhotosCompletionHandler: (([String]) -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var albumThumbnailSize: CGSize",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let imageDimension: CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let size",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listToDisplay() -> [Any]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, customCellFor indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "loadAlbumList()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "albumForAssetCollection(_ collection: PHAssetCollection) -> PhotoAlbumEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToPhotosSelectionViewControllerWithPhotoAlbum(_ album: PhotoAlbumEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withSavePhotosCompletion handler: @escaping ([String]) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "PhotoAlbumSelectionViewController",
  "superClass": 264
},{
  "id": 121,
  "typeString": "class",
  "properties": [
    {
  "name": "var album: PhotoAlbumEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var photoImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateCellWithPhotoAlbum(_ album: PhotoAlbumEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "PhotoAlbumCell",
  "superClass": 263
},{
  "id": 122,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSelectedImageSubview",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var photo: PhotoEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isPhotoSelected: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateWithPhoto(_ photo: PhotoEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "toggleSelectButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateImageViewSelectedState()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "PhotoCell",
  "superClass": 267
},{
  "id": 123,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSpacingBetweenCells: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var albumTitle: String",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var assetFetchResult",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var albumPhotoList: [PhotoEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var selectedPhotoCount: Int",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var areAnyPhotosSelected: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var savePhotosCompletion: (([String]) -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var collectionView: UICollectionView! override",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var preferredStatusBarStyle: UIStatusBarStyle",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "photoSelectionDoneButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "backButtonPressed()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpNoteImageList()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "selectedPhotoIdentifierList() -> [String]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "photoSizeInContainingRectangle(_ containerRectangle: CGRect, scaled scale: CGFloat = 1) -> CGSize",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTitle()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateHeaderAppearance(shouldHighlight isHighlighted: Bool)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setNaviagtionBar(shouldHighlight isHighlighted: Bool)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateBackFromPhotoSelection()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withAssetsFetchResult result: PHFetchResult<PHAsset>, albumTitle: String, completionOnSave: (([String]) -> Void)?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "PhotoSelectionViewController",
  "superClass": 260
},{
  "id": 124,
  "typeString": "protocol",
  "methods": [
    {
  "name": "locationSearchViewController(_ viewController: LocationSearchViewController, didSelect location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(didPressDismissButtonFor viewController: LocationSearchViewController)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "LocationSearchViewControllerDelegate",
  "superClass": 259
},{
  "id": 125,
  "typeString": "class",
  "properties": [
    {
  "name": "var searchTextContainer: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var searchTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noDataView: NoDataView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: LocationSearchDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: LocationSearchViewControllerDelegate? required deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dismissButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "searchTextFieldDidChangeEditing(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchDataModel(didFinishLoadingAddressListFor dataModel: LocationSearchDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchDataModel(_ dataModel: LocationSearchDataModel, didFinishLoading location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchDataModel(_ dataModel: LocationSearchDataModel, failedToLoadAddressListWith error: Error)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showTableView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withAddress address: String, delegate: LocationSearchViewControllerDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "LocationSearchViewController",
  "superClass": 265
},{
  "id": 126,
  "typeString": "class",
  "properties": [
    {
  "name": "var nameLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var descriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var locationPrediction: LocationPredictionEntity?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "populate(with locationPrediction: LocationPredictionEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "LocationPredictionCell",
  "superClass": 263
},{
  "id": 127,
  "typeString": "protocol",
  "methods": [
    {
  "name": "locationSearchDataModel(didFinishLoadingAddressListFor dataModel: LocationSearchDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchDataModel(_ dataModel: LocationSearchDataModel, didFinishLoading location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchDataModel(_ dataModel: LocationSearchDataModel, failedToLoadAddressListWith error: Error)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "LocationSearchDataModelDelegate",
  "superClass": 259
},{
  "id": 128,
  "typeString": "class",
  "properties": [
    {
  "name": "var address: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationPredictionList: [LocationPredictionEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let placesClient",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: LocationSearchDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "searchLocations(withText text: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "lookUpLocation(withIdentifier id: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "lookUpPlaceIdDidFinish(withPlace place: GMSPlace?, error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "autocompleteQueryDidFinish(withAutocompletePredictionList autocompletePredictionList: [GMSAutocompletePrediction]?, error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "locationPredictionList(fromAutocompletePredictionList autocompletePredictionList: [GMSAutocompletePrediction]?) -> [LocationPredictionEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withAddress address: String, delegate: LocationSearchDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "LocationSearchDataModel"
},{
  "id": 129,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEmptyDateString",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "let kDisabeldTextColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kRegularTextColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kDisableSliderMinTrackColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kEnabledSliderMinTrackColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: SunCalculatorDataModel!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var sunCalculatorMapView: SunCalculatorMapView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var mapContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var locationLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var locationTextField: UITextField!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var locationButton: UIButton!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var dateLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dateValueLabel: UILabel!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var dateButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunriseTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var selectedTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var sunsetTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var timeSlider: UISlider!",
  "type": "instance",
  "accessLevel": "fileprivate"
},
    {
  "name": "var sunriseLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunPositionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunsetLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunriseColorView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var daylightColorView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunsetColorView: UIView! required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dateButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "timerSliderValueChanged(_ sender: UISlider)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setupTitles()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showLocationSearchViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "clearLocation()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "selectLocation(_ location: LocationEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeSlider()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configureTimeSliderValuesWith(startingDate: Date, endingDate: Date, selectedDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeSliderMinimumValue()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeSliderMaximumValueWith(startingDate: Date, endingDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeSliderSelectedValueWith(selectedDate: Date, startingDate: Date, endingDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeSliderSection(isEnabled: Bool, startingDate: Date = Date(), endingDate: Date = Date())",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setTimeSlider(isEnabled: Bool)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeLabels(isEnabled: Bool, startingDate: Date = Date(), endingDate: Date = Date())",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "timeString(for date: Date, isEnabled: Bool) -> String",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showDatePickerViewControllerWith(date: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sunCalculatorMapView(_ sender: SunCalculatorMapView, didUpdateLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunCalculatorMapView(locationServiceUnavailableFor: SunCalculatorMapView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "datePickerViewController(_ viewController: DatePickerViewController, didSelectDate date: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(_ viewController: LocationSearchViewController, didSelect location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(didPressDismissButtonFor viewController: LocationSearchViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(selectedDate: Date = Date())",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SunCalculatorViewController",
  "superClass": 260
},{
  "id": 130,
  "typeString": "class",
  "properties": [
    {
  "name": "var kEmptyDateStringValue: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataModelValue: SunCalculatorDataModel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var timeSliderValue: UISlider",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunriseTimeLabelValue: UILabel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunsetTimeLabelValue: UILabel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var selectedTimeLabelValue: UILabel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dateValueLabelValue: UILabel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationButtonValue: UIButton",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationTextFieldValue: UITextField",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SunCalculatorViewControllerMock",
  "superClass": 129
},{
  "id": 131,
  "typeString": "class",
  "properties": [
    {
  "name": "var selectedLocation: LocationEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var selectedDate: Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var startOfDayDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endOfDayDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var localTimeZone: TimeZone?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let coordinate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var selectedTimeString: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "updateBeginingAndEndingOfDay(isPolarDay: Bool, sunriseDate: Date?, sunsetDate: Date?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateSelectedDateByAdding(timeInterval: TimeInterval)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(selectedDate: Date, selectedLocation: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SunCalculatorDataModel"
},{
  "id": 132,
  "typeString": "class",
  "properties": [
    {
  "name": "var menuTitleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var menuImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var menuImageLeadingConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populate(withTitle title: String, image: UIImage, isSelected: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "MenuCell",
  "superClass": 263
},{
  "id": 133,
  "typeString": "enum",
  "methods": [
    {
  "name": "title() -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "iconImage() -> UIImage?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "events"
},
    {
  "name": "sunCalculator case settings case count"
}
  ],
  "name": "MenuItem",
  "superClass": 255
},{
  "id": 134,
  "typeString": "class",
  "properties": [
    {
  "name": "var selectedMenuItem: MenuItem",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var backgroundView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "navigateToSelectedMenuItemViewController()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "MenuViewController",
  "superClass": 265
},{
  "id": 135,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSelectedBarHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kMinimumButtonBarItemSpecWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: EventListDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var upcomingEventListViewController: EventListViewController?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var eventHistoryListViewController: EventListViewController?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var wasEventsViewControllerViewLoaded: Bool",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "menuButtonPressed()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToAddEventViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "eventListDataModel(finishedLoadingEventList dataModel: EventListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewControllers(for pagerTabStripController: PagerTabStripViewController) -> [UIViewController]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "configure(cell: EventsTabCell, for indicatorInfo: IndicatorInfo)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateIndicator(for viewController: PagerTabStripViewController, fromIndex: Int, toIndex: Int, withProgressPercentage progressPercentage: CGFloat, indexWasChanged: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "menuBarButtonItem() -> UIBarButtonItem",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addEventBarButtonItem() -> UIBarButtonItem",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "initializeButtonBarItemSpec()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configureButtonBar()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    174
  ],
  "name": "EventTabBarViewController",
  "superClass": 268
},{
  "id": 136,
  "typeString": "enum",
  "cases": [
    {
  "name": "description"
},
    {
  "name": "images"
}
  ],
  "name": "Section",
  "superClass": 255
},{
  "id": 137,
  "typeString": "class",
  "properties": [
    {
  "name": "let kTitleLabelSideConstraintInset: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kTitleLabelBottomConstraintInset: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kTitleLabelFontSize: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSectionHeaderViewHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: NoteDetailsDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noteTitleLabel",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var thumbnailDictionary: [String: UIImage]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageSize: CGSize",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let widthOfAllImages",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let imageDimension",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "editButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableHeaderView() -> UIView",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, customCellFor indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "numberOfSections(in tableView: UITableView) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteDetailsDataModelFinishedLoadingNote(_ dataModel: NoteDetailsDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageGalleryViewController(_ controller: ImageGalleryViewController, removedImageAtIndex index: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "descriptionCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "imagesCellForRow(_ row: Int) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "imageListForRow(_ row: Int) -> [UIImage]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "identifierListForImagesInRow(_ row: Int, imageCount count: Int) -> [String]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "loadImagesWithIdentifierList(_ identifierList: [String])",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "leftToLoadImageCountForRow(_ row: Int) -> Int",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    138
  ],
  "name": "NoteDetailsViewController",
  "superClass": 269,
  "containedEntities": [
    136
  ]
},{
  "id": 138,
  "typeString": "protocol",
  "methods": [
    {
  "name": "noteDetailsDataModelFinishedLoadingNote(_ dataModel: NoteDetailsDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteDetailsDataModelDelegate",
  "superClass": 259
},{
  "id": 139,
  "typeString": "class",
  "properties": [
    {
  "name": "var note: NoteEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: NoteRepository?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: NoteDetailsDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isNoteDescriptionEmpty: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var imageCount: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var title: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "imageId(at index: Int) -> String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "removeImage(at index: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateNote()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteNote()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withNote note: NoteEntity, delegate: NoteDetailsDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteDetailsDataModel",
  "superClass": 256
},{
  "id": 140,
  "typeString": "enum",
  "cases": [
    {
  "name": "title"
},
    {
  "name": "note case image"
}
  ],
  "name": "FieldType",
  "superClass": 255
},{
  "id": 141,
  "typeString": "class",
  "properties": [
    {
  "name": "let kImageSectionHeaderViewHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kImageTitleFontSize: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kImageTitleLabelLeftMargin: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var thumbnailDictionary: [String: UIImage]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageSize: CGSize",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let widthOfAllImages",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let imageDimension",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var note: NoteEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: CreateOrEditNoteDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var separatorView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var separatorHeightLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteNoteButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteNoteButtonHeightLayoutConstraint: NSLayoutConstraint! convenience convenience required deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveChanges()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "navigateBack()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "numberOfSections(in tableView: UITableView) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputMultilineLineCell(_ cell: InputMultiLineCell, didFinishEditingWithText text: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imagePickerControllerDidCancel(_ picker: UIImagePickerController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageGalleryViewController(_ controller: ImageGalleryViewController, removedImageAtIndex index: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "createOrEditNoteDataModelDeletedNote(_ dataModel: CreateOrEditNoteDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "photoAlbumSaveSelectionPressed(_ imageIdentifierList: [String])",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "hideDeleteButton()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "titleCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "noteCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "imageCellForRow(_ row: Int) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "removeImage(at index: Int)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "saveImage(_ image: UIImage)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addNoteImageWithPlaceholder(_ placeholder: PHObjectPlaceholder)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "loadImagesWithIdentifierList(_ identifierList: [String])",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "identifierListForImagesInRow(_ row: Int, imageCount: Int) -> [String]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "imageListForRow(_ row: Int) -> [UIImage]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "leftToLoadImageCountForRow(_ row: Int) -> Int",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addImagesFromLibrary()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "takePhoto()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showConfirmDeleteAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showAttachImageActionSheet()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showPhotoLibraryUnavailableAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showCameraUnavailableAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showAlertWithOpenSettingsAction(withTitle title: String, message: String, actionTitle: String, cancelTitle: String)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToPhotoAlbumSelection()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToImagePicker()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withNote note: NoteEntity, isEditMode: Bool)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(toCreateWithEventId eventId: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(toEdit note: NoteEntity, thumbnailDictionary: [String: UIImage])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    271,
    262
  ],
  "name": "CreateOrEditNoteViewController",
  "superClass": 270,
  "containedEntities": [
    140
  ]
},{
  "id": 142,
  "typeString": "protocol",
  "methods": [
    {
  "name": "createOrEditNoteDataModelDeletedNote(_ dataModel: CreateOrEditNoteDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CreateOrEditNoteDataModelDelegate",
  "superClass": 259
},{
  "id": 143,
  "typeString": "class",
  "properties": [
    {
  "name": "let note: NoteEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: NoteRepository!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: CreateOrEditNoteDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageCount: Int",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "saveNote()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteNote()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageIdList(fromRange range: Range<Int>) -> [String]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageId(at index: Int) -> String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addImageId(_ id: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addImageIdList(_ idList: [String])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "removeImage(at index: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(title: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(text: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, deletedNoteWithId id: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with note: NoteEntity, delegate: CreateOrEditNoteDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    64
  ],
  "name": "CreateOrEditNoteDataModel"
},{
  "id": 144,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: NoteListDataModel! required @objc @objc",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listToDisplay() -> [Any]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, customCellFor indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setupTabBarItem()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addNoteButtonPressed(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "noteListDataModelStartedUpdatingNotes(_ datamodel: NoteListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteListDataModelFinishedUpdatingNotes(_ datamodel: NoteListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteListViewController",
  "superClass": 264
},{
  "id": 145,
  "typeString": "class",
  "properties": [
    {
  "name": "var noteHeaderLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noteTextLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageCountLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageCountImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "layoutSubviews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateCellWithNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "NoteListCell",
  "superClass": 263
},{
  "id": 146,
  "typeString": "protocol",
  "methods": [
    {
  "name": "noteListDataModelFinishedUpdatingNotes(_ datamodel: NoteListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteListDataModelDelegate",
  "superClass": 259
},{
  "id": 147,
  "typeString": "class",
  "properties": [
    {
  "name": "let event: EventEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var noteList: [NoteEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: NoteRepository?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: NoteListDataModelDelegate? convenience",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "addNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteNote(_ note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteAtIndex(_ index: Int) -> NoteEntity?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNoteList noteList: [NoteEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with event: EventEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with event: EventEntity, delegate: NoteListDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteListDataModel",
  "superClass": 256
},{
  "id": 148,
  "typeString": "class",
  "properties": [
    {
  "name": "var event: EventEntity!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var agendaListViewController: AgendaListViewController?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var noteListViewController: NoteListViewController? required",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpTabs()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventDetailsViewController",
  "superClass": 272
},{
  "id": 149,
  "typeString": "class",
  "properties": [
    {
  "name": "var dataModel: AgendaDataModel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunCalculatorMapView: SunCalculatorMapView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var startTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var headerView: UIView!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherBackgroundImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherDescriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var temperatureLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var windSpeedLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var addressLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var addressButton: UIButton!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var mapContainerView: UIView! required",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addressButtonPressed(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpNavigationBar(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateBack(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToAgendaDetails(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpBackgroundGradient(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "changeGradient(leftColor: UIColor, rightColor: UIColor)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpWeatherViews(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with agenda: AgendaEntity, of event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaViewController",
  "superClass": 265,
  "extensions": [
    152,
    153
  ]
},{
  "id": 150,
  "typeString": "protocol",
  "methods": [
    {
  "name": "agendaDataModel(_ dataModel: AgendaDataModel, loadedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaDataModelDelegate",
  "superClass": 259
},{
  "id": 151,
  "typeString": "class",
  "properties": [
    {
  "name": "var event: EventEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var agenda: AgendaEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: AgendaRepository!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: AgendaDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with agenda: AgendaEntity, of event: EventEntity, delegate: AgendaDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    61
  ],
  "name": "AgendaDataModel"
},{
  "id": 154,
  "typeString": "enum",
  "cases": [
    {
  "name": "title case time case date"
}
  ],
  "name": "FieldType",
  "superClass": 255
},{
  "id": 155,
  "typeString": "class",
  "properties": [
    {
  "name": "var agenda: AgendaEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: CreateOrEditAgendaDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var searchOrClearAddressButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapContainerPlaceholderView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapContainerView: MapContainerView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var horizontalSeparatorView_heightLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteButton_heightLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteButton: UIButton! required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidDisappear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "editAddressButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "searchOrRemoveButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveChanges()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "navigateBack()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "doubleChoiceCellDidTouchUpInsideLeftPart(_ cell: DoubleChoiceCell)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "doubleChoiceCellDidTouchUpInsideRightPart(_ cell: DoubleChoiceCell)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "datePickerViewController(_ viewController: DatePickerViewController, didSelectDate date: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "stringPickerViewController(_ viewController: StringPickerViewController, didSelectIndex index: Int, withValue value: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(wasInteractedWith mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapViewController(_ controller: MapViewController, selected location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(_ viewController: LocationSearchViewController, didSelect location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(didPressDismissButtonFor viewController: LocationSearchViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "createOrEditAgendaDataModelDeletedAgenda(_ dataModel: CreateOrEditAgendaDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateLocation(_ location: LocationEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpViews()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpCreateOrEditMode()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpMapContainerView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpTableView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "titleCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "timeCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "dateCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showTimePicker(timeInterval: TimeInterval, earliestTime: TimeInterval = 0)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showDatePicker(for indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "presentLocationSearchViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showConfirmDeletionAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(toCreateAgendaWith event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(toEdit agenda: AgendaEntity, of event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CreateOrEditAgendaViewController",
  "superClass": 270,
  "containedEntities": [
    154
  ]
},{
  "id": 156,
  "typeString": "protocol",
  "methods": [
    {
  "name": "createOrEditAgendaDataModelDeletedAgenda(_ dataModel: CreateOrEditAgendaDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CreateOrEditAgendaDataModelDelegate",
  "superClass": 259
},{
  "id": 157,
  "typeString": "class",
  "properties": [
    {
  "name": "let kMaxEventDurationInDays",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var agenda: AgendaEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var location: LocationEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var coordinate: CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var selectedDay: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dayNumberString: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var eventDateString: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: AgendaRepository?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: CreateOrEditAgendaDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "deleteAgenda()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveAgenda()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(title: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(amountOfDaysAfterEventStart: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(startTime: TimeInterval)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(endTime: TimeInterval)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dayList() -> [String]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, deletedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with event: EventEntity, agenda: AgendaEntity, delegate: CreateOrEditAgendaDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    61
  ],
  "name": "CreateOrEditAgendaDataModel"
},{
  "id": 158,
  "typeString": "protocol",
  "methods": [
    {
  "name": "mapViewController(_ controller: MapViewController, selected location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "MapViewControllerDelegate",
  "superClass": 259
},{
  "id": 159,
  "typeString": "class",
  "properties": [
    {
  "name": "var mapContainerView: MapContainerView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var selectedCoordinate: CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: MapViewControllerDelegate? required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpMap()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "fullAddress(from lineList: [String]) -> String",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with coordinate: CLLocationCoordinate2D?, delegate: MapViewControllerDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "MapViewController",
  "superClass": 260
},{
  "id": 160,
  "typeString": "class",
  "properties": [
    {
  "name": "let kAgendaCellAMPMTimeContainerWidth: CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kAgendaCell24HTimeContainerWidth: CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kAddressLabelMargin: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kAddressChangedLabelMargin: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var startTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var endTimeLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var timeContainerWidthConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var changedAddressImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressLabelLeadingLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var weatherContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var weatherImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var temperatureLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var windSpeedLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var backgroundGradientView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var backgroundMountainImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var agenda: AgendaEntity?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "layoutSubviews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populate(withAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpAddressViews()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateTimeContainerWidth()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpSunsetOrSunriseStartTime(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpWeatherViews(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpBackgroundGradient(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "changeGradient(leftColor: UIColor, rightColor: UIColor)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "removeGradient()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "resizeGradientLayer()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AgendaDefaultCell",
  "superClass": 263
},{
  "id": 161,
  "typeString": "class",
  "properties": [
    {
  "name": "var timeZoneLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateCellWithAgenda(_ agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "TimeZoneSeparatorCell",
  "superClass": 263
},{
  "id": 162,
  "typeString": "protocol",
  "methods": [
    {
  "name": "agendaStartingLocationCellDidCancelStartingLocation(_ cell: AgendaStartingLocationCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaStartingLocationCellDelegate",
  "superClass": 259
},{
  "id": 163,
  "typeString": "class",
  "properties": [
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var addressLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var cancelButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: AgendaStartingLocationCellDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateCellWithAgenda(_ agenda: AgendaEntity, delegate: AgendaStartingLocationCellDelegate? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetStartingLocation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "cancelButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AgendaStartingLocationCell",
  "superClass": 263
},{
  "id": 164,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDropDownWarning_fontSize: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSectionHeaderHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: AgendaListDataModel! required deinit",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listToDisplay() -> [Any]!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, customCellFor indexPath: IndexPath!) -> UITableViewCell!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "numberOfSections(in tableView: UITableView) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addAgendaButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setupTabBarItem()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaListDataModelDidFinishLoadingAgendaList(_ dataModel: AgendaListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaStartingLocationCellDidCancelStartingLocation(_ cell: AgendaStartingLocationCell)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(_ viewController: LocationSearchViewController, didSelect location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationSearchViewController(didPressDismissButtonFor viewController: LocationSearchViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startObservingNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedNotificationInternetIsAvailable()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedNotificationInternetIsNotAvailable()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "startingLocationCell(withIndexPath indexPath: IndexPath, agenda: AgendaEntity) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "timeZoneCell(withIndexPath indexPath: IndexPath, agenda: AgendaEntity) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaCell(withIndexPath indexPath: IndexPath, agenda: AgendaEntity) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "presentLocationSearchViewController(withAddress address: String)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToAgendaDetails(with agenda: AgendaEntity, of event: EventEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withEvent event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaListViewController",
  "superClass": 264
},{
  "id": 165,
  "typeString": "protocol",
  "methods": [
    {
  "name": "agendaListDataModelDidFinishLoadingAgendaList(_ dataModel: AgendaListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaListDataModelDelegate",
  "superClass": 259
},{
  "id": 166,
  "typeString": "class",
  "properties": [
    {
  "name": "var event: EventEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var groupedForDisplayAgendaList: [[AgendaEntity]]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var agendaList: [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var agendaRepository: AgendaRepository?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var eventRepository: EventRepository?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var forecastDataModel",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: AgendaListDataModelDelegate? convenience",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "agendaAtIndexPath(_ indexPath: IndexPath) -> AgendaEntity?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setEventStartingLocation(_ location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "clearEventStartingLocation()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEvent event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateForecastsIfNeeded()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgendaList agendaList: [AgendaEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaListWithUpdatedDates(_ agendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateEventEndDate()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpAgendaListForDisplay()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addStartingLocationIfNeeded(toAgendaList agendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addTemporaryLocations(forAgendasInList agendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "markChangingLocations(forAgendasInList agendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaListByAddingTimeZoneMarkers(fromAgendaList originalAgendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaListGroupedByDays(fromAgendaList agendaList: [AgendaEntity]) -> [[AgendaEntity]]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaListWithSunriseAndSunset(_ agendaDayGroupList: [[AgendaEntity]]) -> [[AgendaEntity]]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "agendaListByAddingSunriseSunsetAgendas(forAgendaList agendaList: [AgendaEntity]) -> [AgendaEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sunCalculatorForAgenda(_ agenda: AgendaEntity) -> TSMSunCalculator?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with event: EventEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(event: EventEntity, delegate: AgendaListDataModelDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    61
  ],
  "name": "AgendaListDataModel"
},{
  "id": 167,
  "typeString": "class",
  "properties": [
    {
  "name": "var dayLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var fullDateLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populate(withDayNumberTimeInterval timeInterval: TimeInterval, date: Date? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "weekdayAndDateString(_ date: Date?) -> String?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "DateSectionHeaderView",
  "superClass": 273
},{
  "id": 168,
  "typeString": "enum",
  "cases": [
    {
  "name": "header"
},
    {
  "name": "name case type case date"
}
  ],
  "name": "FieldType",
  "superClass": 255
},{
  "id": 169,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var tableView: UITableView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var deleteButtonContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dataModel: CreateOrEditEventDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var event: EventEntity? required deinit",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveChanges()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "navigateBack()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "hideKeyboard()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "datePickerViewController(_ viewController: DatePickerViewController, didSelectDate date: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "datePickerViewController(didClearDate viewController: DatePickerViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "stringPickerViewController(_ viewController: StringPickerViewController, didSelectIndex index: Int, withValue value: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteEvent()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "updateEventTypeImage(with eventType: EventType)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "headerCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "titleInputCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "singleChoiceCell(withTitle title: String, text: String?) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(toEdit event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CreateOrEditEventViewController",
  "superClass": 270,
  "containedEntities": [
    168
  ]
},{
  "id": 170,
  "typeString": "class",
  "properties": [
    {
  "name": "var eventTypeImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populate(with image: UIImage?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventHeaderCell",
  "superClass": 263
},{
  "id": 171,
  "typeString": "class",
  "properties": [
    {
  "name": "var event: EventEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var repository: EventRepository",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var startDate: Date",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "saveEvent()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteEvent()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(title: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(date: Date?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "set(type: EventType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "CreateOrEditEventDataModel"
},{
  "id": 172,
  "typeString": "enum",
  "properties": [
    {
  "name": "var noDataConfiguration: NoDataConfiguration",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var indicatorInfo: IndicatorInfo",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "upcoming case history var noDataConfiguration"
}
  ],
  "name": "EventListType"
},{
  "id": 173,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDateIndicationPanelViewWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var event: EventEntity?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var editPressedCompletion: (() -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dateLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var editButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var eventTypeImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dateIndicationPanelViewWidthLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var clockImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var daysLeftNumberLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var daysLeftTextLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populate(with event: EventEntity, editPressedCompletion handler: @escaping () -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "editButtonDidTouchUpInside(_ sender: Any?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configureDateIndication()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configureDaysLeftLabel(withDaysLeftUntillStarts daysLeft: Int)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setDateIndicationPanelVisible(_ isVisible: Bool)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "EventCell",
  "superClass": 263
},{
  "id": 174,
  "typeString": "protocol",
  "methods": [
    {
  "name": "eventListDataModel(finishedLoadingEventList dataModel: EventListDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventListDataModelDelegate",
  "superClass": 259
},{
  "id": 175,
  "typeString": "class",
  "properties": [
    {
  "name": "var eventList: [EventEntity]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var repository: EventRepository!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: EventListDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "saveEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "eventList(by type: EventListType, isAscending: Bool? = nil) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "deleteEvent(_ event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEventList eventList: [EventEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "rescheduleAppRatingRequestIfNeeded()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(withDelegate delegate: EventListDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    69
  ],
  "name": "EventListDataModel"
},{
  "id": 176,
  "typeString": "class",
  "properties": [
    {
  "name": "var likedAppCompletionHandler: (() -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var dislikedAppCompletionHandler: (() -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var yesButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "yesButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "populate(withLikedAppCompletion likedHandler: @escaping () -> Void, disLikedAppCompletion dislikedHandler: @escaping () -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "RateAppCell",
  "superClass": 263
},{
  "id": 177,
  "typeString": "class",
  "properties": [
    {
  "name": "let kRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var listType: EventListType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var composeTools",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataModel: EventListDataModel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var shouldDisplayRateAppCell: Bool",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "listToDisplay() -> [Any]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, customCellFor indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "eventCell(with indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "rateAppCell() -> UITableViewCell",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showRateAppAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "rateInAppStore()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showFeedbackAlert()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "openMailForFeedback()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showRateResponseAlert(withTitle title: String, message: String, okCompletion: @escaping () -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showSignUpSuggestionAlertIfNeeded()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "navigateToEditEventViewController(withEvent event: EventEntity)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with dataModel: EventListDataModel, listType: EventListType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventListViewController",
  "superClass": 264
},{
  "id": 178,
  "typeString": "class",
  "properties": [
    {
  "name": "var iconImageView: UIImageView!",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventsTabCell",
  "superClass": 267
},{
  "id": 179,
  "typeString": "class",
  "properties": [
    {
  "name": "let kSignInButtonCornerRadius: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var descriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var logInButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var skipButton: UIButton! override",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var preferredStatusBarStyle: UIStatusBarStyle",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewWillDisappear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "skipButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInAnonymously()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "failedAnonymousSignIn(with error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "finishedAnonymousSignIn()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showGenericSignInError()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "ifPrivacyPolicyWasAgreedTo(_ completion: @escaping () -> Void)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showAgreeToPrivacyPolicyAlert(withCompletion completion: @escaping () -> Void)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AccountActionsViewController",
  "superClass": 260
},{
  "id": 180,
  "typeString": "class",
  "properties": [
    {
  "name": "let googleSignInManager",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let facebookSignInManager",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var googleSignInButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var facebookSignInButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var emailSignInButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var googleContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var facebookContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var emailContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithGoogleButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithFacebookDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerStartedSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerTookOverSignInFlow(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, finishedSignInWith credential: AuthCredential)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerFailedSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManagerCancelledSignIn(_ manager: GoogleSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, presentViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "googleSignInManager(_ manager: GoogleSignInManager, dismissViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManagerStartedSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManagerCanceledSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManagerFailedSignIn(_ manager: FacebookSignInManager)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "facebookSignInManager(_ manager: FacebookSignInManager, finishedSignInWith credential: AuthCredential)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signIn(with credential: AuthCredential)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "signInSucceeded()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "signInFailed(with error: Error?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUpButtons()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showOnboardingViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showGenericSignInErrorAlert()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SignInOptionsViewController",
  "superClass": 260
},{
  "id": 181,
  "typeString": "enum",
  "cases": [
    {
  "name": "email"
},
    {
  "name": "password case count"
}
  ],
  "name": "SignUpSection",
  "superClass": 255
},{
  "id": 182,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDisabledButtonAlpha: CGFloat",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataModel: SignUpWithEmailDataModel! required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "setUpViews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showGenericSignInError()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "submitButtonAction()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModel(_ dataModel: SignUpWithEmailDataModel, failedValidationWith errorDict: [ValidationFieldType: ValidationErrorType])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModelStartedSignUp(_ dataModel: SignUpWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModelFinishedSignUp(_ dataModel: SignUpWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModel(_ dataModel: SignUpWithEmailDataModel, failedSignUpWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateValidationErrorMessage(for signUpSection: SignUpSection, message: String?)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignUpWithEmailViewController",
  "superClass": 191
},{
  "id": 183,
  "typeString": "enum",
  "cases": [
    {
  "name": "email case password"
}
  ],
  "name": "ValidationFieldType"
},{
  "id": 184,
  "typeString": "enum",
  "properties": [
    {
  "name": "var localizedMessage: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "none case emailEmpty case emailFormat case passwordEmpty case passwordTooShort var localizedMessage"
}
  ],
  "name": "ValidationErrorType"
},{
  "id": 185,
  "typeString": "protocol",
  "methods": [
    {
  "name": "signUpWithEmailDataModel(_ dataModel: SignUpWithEmailDataModel, failedValidationWith errorDict: [ValidationFieldType: ValidationErrorType])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModelStartedSignUp(_ dataModel: SignUpWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModelFinishedSignUp(_ dataModel: SignUpWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpWithEmailDataModel(_ dataModel: SignUpWithEmailDataModel, failedSignUpWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignUpWithEmailDataModelDelegate",
  "superClass": 259
},{
  "id": 186,
  "typeString": "class",
  "properties": [
    {
  "name": "var email: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var password: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var validationErrorDict: [ValidationFieldType: ValidationErrorType]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: SignUpWithEmailDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "signUp()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUp(withEmail email: String, password: String)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "areCredentialsValid(_ email: String, password: String) -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with delegate: SignUpWithEmailDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignUpWithEmailDataModel"
},{
  "id": 187,
  "typeString": "enum",
  "cases": [
    {
  "name": "email"
},
    {
  "name": "password case count"
}
  ],
  "name": "SignInSection",
  "superClass": 255
},{
  "id": 188,
  "typeString": "class",
  "properties": [
    {
  "name": "var dataModel: SignInWithEmailDataModel! required",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "setUpViews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "submitButtonAction()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "forgotPasswordButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelFailedValidation(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelStartedSignIn(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelFinishedSignIn(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModel(_ dataModel: SignInWithEmailDataModel, failedSignInWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelFailedSignInDueToUnverfiedEmail(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignInWithEmailViewController",
  "superClass": 191
},{
  "id": 189,
  "typeString": "protocol",
  "methods": [
    {
  "name": "signInWithEmailDataModelFailedValidation(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelStartedSignIn(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelFinishedSignIn(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModel(_ dataModel: SignInWithEmailDataModel, failedSignInWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signInWithEmailDataModelFailedSignInDueToUnverfiedEmail(_ dataModel: SignInWithEmailDataModel)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignInWithEmailDataModelDelegate",
  "superClass": 259
},{
  "id": 190,
  "typeString": "class",
  "properties": [
    {
  "name": "var email: String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var password: String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var delegate: SignInWithEmailDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "signIn()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signIn(withEmail email: String, password: String)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with delegate: SignInWithEmailDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SignInWithEmailDataModel"
},{
  "id": 191,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEstimatedRowHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kTableViewHeaderVerticalAxisOffset: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var bottomContainerView_heightLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var bottomContainerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var submitButton: UIButton!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var forgotPasswordButton: UIButton!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var signUpButton: UIButton! required",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidAppear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "viewDidDisappear(_ animated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "submitButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "submitButtonAction()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "forgotPasswordButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "signUpButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerTableViewCells()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableHeaderView() -> UIView",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpViews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "hideLowerButtons()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(withTitle title: String, inputType: SingleLineCellInputType) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "handleNavigationAfterSignIn()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "handleFailure(with error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showGenericSignInError()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showEmailNotFoundError()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showCredentialsErrorAlert()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showOnboardingViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "BaseSignInWithEmailViewController",
  "superClass": 269
},{
  "id": 192,
  "typeString": "enum",
  "cases": [
    {
  "name": "email"
},
    {
  "name": "count"
}
  ],
  "name": "ResetPasswordSection",
  "superClass": 255
},{
  "id": 193,
  "typeString": "class",
  "properties": [
    {
  "name": "var dataModel: ResetPasswordDataModel! required",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "setUpViews()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showGenericSignInError()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showEmailNotFoundError()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "submitButtonAction()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView!, numberOfRowsInSection section: Int) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModelFailedValidation(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModelStartedPasswordReset(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModelFinishedPasswordReset(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModel(_ dataModel: ResetPasswordDataModel, failedPasswordResetWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ResetPasswordViewController",
  "superClass": 191
},{
  "id": 194,
  "typeString": "protocol",
  "methods": [
    {
  "name": "resetPasswordDataModelFailedValidation(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModelStartedPasswordReset(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModelFinishedPasswordReset(_ dataModel: ResetPasswordDataModel)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPasswordDataModel(_ dataModel: ResetPasswordDataModel, failedPasswordResetWith error: Error?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ResetPasswordDataModelDelegate",
  "superClass": 259
},{
  "id": 195,
  "typeString": "class",
  "properties": [
    {
  "name": "var email: String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var delegate: ResetPasswordDataModelDelegate?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "resetPassword()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetPassword(forEmail email: String)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init(with delegate: ResetPasswordDataModelDelegate)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ResetPasswordDataModel"
},{
  "id": 196,
  "typeString": "enum",
  "cases": [
    {
  "name": "generalPreferences case eventStartingPoint case count"
}
  ],
  "name": "OnboardingPanelType",
  "superClass": 255
},{
  "id": 197,
  "typeString": "class",
  "properties": [
    {
  "name": "let kHeaderDropShadowRadius: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kHeaderDropShadowOpacity: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kHeaderDropShadowOffset: CGSize",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var descriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var nextButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var onboardingContentPanelView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var headerView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var unitsSelectionViewController: GeneralPreferencesViewController!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var homeLocationViewController: HomeLocationViewController!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var visibleView: UIView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var setupIndex",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "viewDidLoad()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "nextButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "backButtonPressed()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "saveSettings()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setupController(withSetupIndex setupIndex: Int)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showBackButtonIfNeeded()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "OnboardingViewController",
  "superClass": 260,
  "containedEntities": [
    196
  ]
},{
  "id": 199,
  "typeString": "class",
  "properties": [
    {
  "name": "let instance: AppDelegate",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "var isInternetAvailable",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kVisibleCenterMenuWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSideMenuShadowOpacity: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSideMenuShadowOffset",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kDefaultWindowWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var window: UIWindow? @objc",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var drawerController: MMDrawerController!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var previousDrawerCenterControllerList: [UIViewController]",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var reachability",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "applicationDidBecomeActive(_ application: UIApplication)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setUpStartingViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showAccountActionsViewController()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "showOnboardingViewController()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "showEventsViewController()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "configureDrawerController(centerViewController: UIViewController, leftDrawerViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setWindowRootViewController(_ rootViewController: UIViewController)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setCenterDrawerController(_ controller: UIViewController)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "navigateBackToPreviousDrawerCenterController()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setDrawerControllerCenterViewController(_ viewController: UIViewController)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setAppAppearance()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configureReachabilityObservation()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sendInternetIsAvailableNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sendInternetIsNotAvailableNotifications()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "protocols": [
    275
  ],
  "name": "AppDelegate",
  "superClass": 274,
  "extensions": [
    198,
    203
  ]
},{
  "id": 200,
  "typeString": "struct",
  "protocols": [
    43
  ],
  "name": "InternetIsAvailable"
},{
  "id": 201,
  "typeString": "struct",
  "protocols": [
    43
  ],
  "name": "InternetNotAvailable"
},{
  "id": 204,
  "typeString": "class",
  "properties": [
    {
  "name": "var checkboxStateChangeCompletion: ((Bool) -> Void)?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var textView: UITextView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var checkboxButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "checkboxButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populate(withPlainText text: String, isCheckboxSelected: Bool, checkboxStateChange completion: ((Bool) -> Void)?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populate(withAttributedText text: NSAttributedString, isCheckboxSelected: Bool, checkboxStateChange completion: ((Bool) -> Void)?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "toggleCheckbox()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isCheckboxSelected() -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "CheckboxCell",
  "superClass": 263
},{
  "id": 205,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDeleteImageViewTag: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var firstImageButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var secondImageButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var thirdImageButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var fourthImageButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var firstImageButtonWidthConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var imageButtonWasPressedClosure: ((Int) -> Void)?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "imageButtonDidTouchUpInside(_ button: UIButton)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "populateCell(imageList: [UIImage], imagesPerRow: Int, tableView: UITableView, isEditable: Bool = false, isLastRow: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageWidth(withImagesPerRow imagesPerRow: Int, tableView: UITableView) -> CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "resetButton(_ button: UIButton)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "ImagesCell",
  "superClass": 263
},{
  "id": 206,
  "typeString": "enum",
  "cases": [
    {
  "name": "undefined"
},
    {
  "name": "float case integer"
}
  ],
  "name": "DoubleInputSingleLineInputType",
  "superClass": 255
},{
  "id": 207,
  "typeString": "protocol",
  "methods": [
    {
  "name": "doubleInputSingleLineCell(_ cell: DoubleInputSingleLineCell, didFinishEditingWithLeftText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "doubleInputSingleLineCell(_ cell: DoubleInputSingleLineCell, didFinishEditingWithRightText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "DoubleInputSingleLineCellDelegate",
  "superClass": 259
},{
  "id": 208,
  "typeString": "class",
  "properties": [
    {
  "name": "let kFloatOnlyRegex",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kIntegerOnlyRegex",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var leftTitleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var leftInputTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var leftLineView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightTitleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightInputTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightLineView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var leftInputType: DoubleInputSingleLineInputType",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightInputType: DoubleInputSingleLineInputType",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: DoubleInputSingleLineCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateCellLeftPart(title: String?, inputText: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateCellRightPart(title: String?, inputText: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setLeftTextFieldInputType(_ inputType: DoubleInputSingleLineInputType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setRightTextFieldInputType(_ inputType: DoubleInputSingleLineInputType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell() -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "resetLeft()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "resetRight()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setTextFieldInputType(_ inputType: DoubleInputSingleLineInputType, forTextField textField: UITextField)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "textFieldDidBeginEditing(_ textField: UITextField)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textFieldDidEndEditing(_ textField: UITextField)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textFieldShouldReturn(_ textField: UITextField) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "DoubleInputSingleLineCell",
  "superClass": 263
},{
  "id": 209,
  "typeString": "protocol",
  "methods": [
    {
  "name": "inputMultilineLineCell(_ cell: InputMultiLineCell, didFinishEditingWithText text: String)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "InputMultilineLineCellDelegate",
  "superClass": 259
},{
  "id": 210,
  "typeString": "class",
  "properties": [
    {
  "name": "let kInputTextViewHorizontalMargin: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kHideKeyboardButtonHeight: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var lineView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var inputTextView: UITextView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var inputTextViewWidthConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: InputMultilineLineCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "hideKeyboardButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "populateCell(title: String?, inputText: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell(withInputText inputText: String, tableView: UITableView) -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addHideKeyboardButtonForTextView(_ textView: UITextView)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "textViewDidChange(_ textView: UITextView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textViewDidBeginEditing(_ textView: UITextView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textViewDidEndEditing(_ textView: UITextView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "InputMultiLineCell",
  "superClass": 263
},{
  "id": 211,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDeleteButtonWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var valueLabel: UILabel!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var deleteButtonWidthLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "deleteButtonDidTouchUpInside(_ sender: Any)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populate(withTitle title: String? = nil, valueText: String, isDeleteButtonVisible: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCell()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SingleChoiceCell",
  "superClass": 263
},{
  "id": 212,
  "typeString": "protocol",
  "methods": [
    {
  "name": "switchCellValueChanged(_ cell: SwitchCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SwitchCellDelegate",
  "superClass": 259
},{
  "id": 213,
  "typeString": "class",
  "properties": [
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var switchButton: UISwitch!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: SwitchCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "populateCell(withTitle title: String, isSelected: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "toggleSwitch()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isSwitchOn() -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell() -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "switchValueChanged()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SwitchCell",
  "superClass": 263
},{
  "id": 214,
  "typeString": "enum",
  "cases": [
    {
  "name": "undefined"
},
    {
  "name": "float case integer case email case password"
}
  ],
  "name": "SingleLineCellInputType",
  "superClass": 255
},{
  "id": 215,
  "typeString": "protocol",
  "methods": [
    {
  "name": "inputSingleLineCell(_ cell: InputSingleLineCell, didFinishEditingWithText text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputSingleLineCell(didBeginEnteringText cell: InputSingleLineCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "InputSingleLineCellDelegate",
  "superClass": 259,
  "extensions": [
    217
  ]
},{
  "id": 216,
  "typeString": "class",
  "properties": [
    {
  "name": "let kFloatOnlyRegex",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kIntegerOnlyRegex",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var inputTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var lineView: UIView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var errorLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: InputSingleLineCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var inputType: SingleLineCellInputType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var symbolLimit: Int",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateCell(title: String?, inputText: String?, delegate: InputSingleLineCellDelegate?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setInputText(_ inputText: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setErrorMessage(_ message: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "markAsSelected(_ isSelected: Bool, animated isAnimated: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setTextFieldInputType(_ inputType: SingleLineCellInputType)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "setSymbolInputLimit(_ symbolLimit: Int)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "inputTextFieldValue() -> String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell() -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "markLineViewAsSelected(_ isSelected: Bool)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "textFieldDidBeginEditing(_ textField: UITextField)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textFieldDidEndEditing(_ textField: UITextField)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textFieldShouldReturn(_ textField: UITextField) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "InputSingleLineCell",
  "superClass": 263
},{
  "id": 218,
  "typeString": "protocol",
  "methods": [
    {
  "name": "addressCellDidPressChangeAddressButton(_ cell: AddressCell)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "addressCellDidClearAddressString(_ cell: AddressCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AddressCellDelegate",
  "superClass": 259
},{
  "id": 219,
  "typeString": "class",
  "properties": [
    {
  "name": "var addressTextField: UITextField!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: AddressCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "clearButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "addressChangeButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "populateCellWithAddressString(_ address: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell() -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "AddressCell",
  "superClass": 263
},{
  "id": 220,
  "typeString": "class",
  "properties": [
    {
  "name": "var searchTextField: UITextField!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var onTextChange: ((String) -> Void)?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populate(onTextChange: @escaping (String) -> Void)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "textFieldDidChangeEditing(_ sender: UITextField)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SearchTableViewCell",
  "superClass": 263
},{
  "id": 221,
  "typeString": "class",
  "properties": [
    {
  "name": "let kCheckButtonCornerRadius: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kCheckButtonBorderWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var checkButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "checkMarkCellDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateCell(text: String?, isChecked: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "heightForCell(withText text: String, tableView: UITableView) -> CGFloat",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setCheckButtonSelected(_ isSelected: Bool)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "CheckMarkCell",
  "superClass": 263
},{
  "id": 222,
  "typeString": "class",
  "properties": [
    {
  "name": "var multilineTextLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "populateCellWithText(_ text: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "reset()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "MultilineTextCell",
  "superClass": 263
},{
  "id": 223,
  "typeString": "protocol",
  "methods": [
    {
  "name": "doubleChoiceCellDidTouchUpInsideLeftPart(_ cell: DoubleChoiceCell)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "doubleChoiceCellDidTouchUpInsideRightPart(_ cell: DoubleChoiceCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "DoubleChoiceCellDelegate",
  "superClass": 259
},{
  "id": 224,
  "typeString": "enum",
  "cases": [
    {
  "name": "left case right"
}
  ],
  "name": "ActiveSide"
},{
  "id": 225,
  "typeString": "class",
  "properties": [
    {
  "name": "var leftValueLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var leftTitleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightValueLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var rightTitleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: DoubleChoiceCellDelegate?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var activeSide: ActiveSide",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "leftButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "rightButtonDidTouchUpInside()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "populateLeftView(withTitle title: String, valueText: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "populateRightView(withTitle title: String, valueText: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetLeftView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "resetRightView()",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "DoubleChoiceCell",
  "superClass": 263,
  "containedEntities": [
    224
  ]
},{
  "id": 228,
  "typeString": "class",
  "properties": [
    {
  "name": "let kMapLineWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunriseLineColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunsetLineColor: UIColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunlineLength: Double",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationCoordinate: CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var eventDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunriseDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunsetDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isPolarDay: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isPolarNight: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "updateSunriseSunsetDates()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "endLocationCoordinateOf(line: GMSPolyline) -> CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noonPolylineEndLocationCoordinate() -> CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "endLocationCoordinateOf(path: GMSPath, startLocationCoordinate: CLLocationCoordinate2D) -> CLLocationCoordinate2D",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "nightPolygonPath(startLocationCoordinate: CLLocationCoordinate2D, endLocationCoordinate: CLLocationCoordinate2D) -> GMSPath?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunrisePolyline() -> GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunsetPolyline() -> GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "polylineTo(sunPosition: TSMSunPosition, color: UIColor) -> GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isNight() -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateIsPolarDayIsPolarNight()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isPolarNightWith(sunsetDate: Date, sunriseDate: Date, sunPosition: TSMSunPosition) -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "isPolarDayWith(sunsetDate: Date, sunriseDate: Date, sunPosition: TSMSunPosition) -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "pathTo(sunPosition: TSMSunPosition) -> GMSPath?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "degreesForm(azimuth: Double) -> Double",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "sunPolylineFor(date: Date, color: UIColor) -> GMSPolyline?",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "SunCalculatorMapDataModel"
},{
  "id": 229,
  "typeString": "protocol",
  "methods": [
    {
  "name": "sunCalculatorMapView(_ sender: SunCalculatorMapView, didUpdateLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunCalculatorMapView(locationServiceUnavailableFor: SunCalculatorMapView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SunCalculatorMapViewDelegate",
  "superClass": 259
},{
  "id": 230,
  "typeString": "class",
  "properties": [
    {
  "name": "let kEventLineStrokeLength: Float",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kEventLineGapLength: Float",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kMinDashedPolylineScale: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunlinesCircleStrokeWidth: CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kNightPolygonFillColor",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let kSunLineColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunlinesCircleBorderColor",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kPolygonDrawingDelay: TimeInterval",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kSunlinesZIndex: Int32",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kEventLineZIndex: Int32",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapView: GMSMapView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var mapContainerView: MapContainerView?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var eventLine: GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunriseLine: GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunsetLine: GMSPolyline?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var nightPolygon: GMSPolygon?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sunlinesCircle: GMSCircle?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var doesRespondToTaps: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationManager: CLLocationManager!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var delegate: SunCalculatorMapViewDelegate?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let dataModel",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var nightPolygonDrawingTimer: Timer?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var sunlinesCircleDrawingTimer: Timer?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapContainerViewPlaceholder: UIView! @objc @objc @objc",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "awakeFromNib()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "configureWith(locationCoordinate: CLLocationCoordinate2D?, eventDate: Date, doesRespondToTaps: Bool = true, doesTrackLocation: Bool = true, delegate: SunCalculatorMapViewDelegate)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "clearMap()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "zoomInMap()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateLocationTracking(shouldTrack shouldTrackLocation: Bool)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "update(eventDate: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "update(eventTime: Date)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "update(locationCoordinate: CLLocationCoordinate2D?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateSunlines(eventDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawSunlines(eventDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "clearSulines()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "tryDrawNightPolygon()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawNightPolygon(startLocation: CLLocationCoordinate2D, endLocation: CLLocationCoordinate2D)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawNightPolygonWithPath(timer: Timer)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawSunlinesCircleWith(mapView: GMSMapView, fillColor: UIColor = .clear)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawSunlinesCircle(timer: Timer)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "drawEventLineWith(eventDate: Date)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "mapContainerViewWith(locationCoordinate: CLLocationCoordinate2D?) -> MapContainerView?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "makePolylineDashed(_ polyline: GMSPolyline, strokeLength: Float, gapLength: Float)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "SunCalculatorMapView",
  "superClass": 266,
  "extensions": [
    226,
    227
  ]
},{
  "id": 231,
  "typeString": "class",
  "methods": [
    {
  "name": "sunCalculatorMapView(_ sender: SunCalculatorMapView, didUpdateLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunCalculatorMapView(locationServiceUnavailableFor: SunCalculatorMapView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    229
  ],
  "name": "SunCalculatorMapViewDelegateMock"
},{
  "id": 232,
  "typeString": "class",
  "properties": [
    {
  "name": "var imageView: UIImageView!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var titleLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var descriptionLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "setUp(with image: UIImage?, title: String, description: String)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "becomeSubview(of view: UIView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoDataView",
  "superClass": 266
},{
  "id": 233,
  "typeString": "class",
  "properties": [
    {
  "name": "var image: UIImage",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var title: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var message: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "init(with image: UIImage, title: String, message: String)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoDataConfiguration",
  "superClass": 256
},{
  "id": 234,
  "typeString": "protocol",
  "methods": [
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didChangeZoom: Float)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(wasInteractedWith mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "MapContainerViewDelegate",
  "superClass": 259,
  "extensions": [
    237
  ]
},{
  "id": 235,
  "typeString": "class",
  "properties": [
    {
  "name": "let kDefaultBearing: CLLocationDirection",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kDefaultViewAngle: Double",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "let kCenteredMarkerGroundAnchorPoint",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var noInternetView: UIView!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var noInternetLabel: UILabel!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var mapTypeButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var myLocationButton: UIButton!",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var myLocationButtonHeightLayoutConstraint: NSLayoutConstraint!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var mapView: GMSMapView!",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var marker: GMSMarker?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var locationManager",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var selectedCoordinate: CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var lastCameraZoom: Float",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isForDisplayOnly: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var delegate: MapContainerViewDelegate?",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var areLocationServicesAvailable: Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "var isSelectedCoordinateDefault: Bool",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "setUpMapContainerView()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "setUp(with delegate: MapContainerViewDelegate, selectedCoordinate: CLLocationCoordinate2D?, isForDisplayOnly: Bool = false, markerImage: UIImage? = UIImage(named: ), shouldCenterMarker: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "select(coordinate: CLLocationCoordinate2D?, zoomLevel: Float = Constants.Location.defaultMapZoom, shouldHideMarker: Bool = false, isSelectedCoordinateDefault: Bool = false)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "resetCoordinate()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "mapTypeButtonDidTouchUpInside(_ button: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "myLocationButtonDidTouchUpInside(_ sender: UIButton)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapView(_ mapView: GMSMapView, didTapAt coordinate: CLLocationCoordinate2D)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapView(_ mapView: GMSMapView, didChange position: GMSCameraPosition)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startObservingNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "receivedNotificationInternetIsAvailable()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "receivedNotificationInternetIsNotAvailable()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateInternetWarning()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "stopObservingForNotifications()",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configuredGMSMap(withFrame frame: CGRect) -> GMSMapView",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "configuredMarker(shouldCenter: Bool = false, image: UIImage?) -> GMSMarker",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "findAddress(for coordinate: CLLocationCoordinate2D)",
  "type": "instance",
  "accessLevel": "private"
}
  ],
  "name": "MapContainerView",
  "superClass": 266,
  "extensions": [
    29
  ]
},{
  "id": 236,
  "typeString": "class",
  "methods": [
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    234
  ],
  "name": "MapContainerViewDelegateMock"
},{
  "id": 238,
  "typeString": "class",
  "methods": [
    {
  "name": "groupName(fromId typeId: Int) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "description(fromId typeId: Int) -> String",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "image(fromId typeId: Int, date: Date, coordinate: CLLocationCoordinate2D) -> UIImage?",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "name": "WeatherDescriptionProvider"
},{
  "id": 239,
  "typeString": "class",
  "properties": [
    {
  "name": "var date: Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var coordinate: CLLocationCoordinate2D",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherId: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var temperature: Double",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var windSpeed: Double",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherImage: UIImage?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var weatherDescription: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var lastUpdateDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endDate: Date",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "match(givenCoordinate: CLLocationCoordinate2D, andDate givenDate: Date) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "encode(with aCoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isCloseEnough(toCoordinate givenCoordinate: CLLocationCoordinate2D) -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "isSoonEnough(forDate givenDate: Date) -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "init?(asDetailedFromDict dict: [String: Any], coordinate: CLLocationCoordinate2D)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(coder aDecoder: NSCoder)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "ForecastEntity",
  "superClass": 256
},{
  "id": 240,
  "typeString": "class",
  "properties": [
    {
  "name": "var id: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let eventId: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var creationDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var title: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var text: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var imageIdentifierList: [String]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "copy() -> Any",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isEqual(_ object: Any?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(with dataDict: [String: Any], id: String?, ownerId: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withEventId eventId: String)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "NoteEntity",
  "superClass": 256
},{
  "id": 242,
  "typeString": "class",
  "properties": [
    {
  "name": "var address: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var coordinate: CLLocationCoordinate2D?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isCoordinateSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var geoPoint: GeoPoint?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let coordinate",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "clear()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "== (lhs: LocationEntity, rhs: LocationEntity) -> Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "init?(with dataDict: [String: Any], id: String? = nil, ownerId: String? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with coordinate: CLLocationCoordinate2D, address: String = )",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with place: GMSPlace)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    67
  ],
  "name": "LocationEntity"
},{
  "id": 243,
  "typeString": "enum",
  "properties": [
    {
  "name": "var localizedName: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var localizedAbbreviation: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "kilometer"
},
    {
  "name": "mile var localizedName"
}
  ],
  "name": "DistanceUnitType",
  "superClass": 255
},{
  "id": 244,
  "typeString": "enum",
  "properties": [
    {
  "name": "var localizedName: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "celsius"
},
    {
  "name": "fahrenheit var localizedName"
}
  ],
  "name": "TemperatureUnitType",
  "superClass": 255
},{
  "id": 245,
  "typeString": "class",
  "properties": [
    {
  "name": "var distance: DistanceUnitType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var temperature: TemperatureUnitType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "distanceInSelectedUnits(fromKilometers distanceInKilometers: Double) -> Double",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "formattedDistanceString(fromKilometers distanceInKilometers: Double) -> String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "== (lhs: UnitsEntity, rhs: UnitsEntity) -> Bool",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "init?(with dataDict: [String: Any], id: String? = nil, ownerId: String? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "UnitsEntity",
  "superClass": 256
},{
  "id": 246,
  "typeString": "enum",
  "properties": [
    {
  "name": "var localizedTitle: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "undefined"
},
    {
  "name": "sunrise case sunset case timeZone case startingLocation var localizedTitle"
}
  ],
  "name": "AgendaType",
  "superClass": 255
},{
  "id": 247,
  "typeString": "class",
  "properties": [
    {
  "name": "var id: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var eventId: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var title: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var location",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var startTime: TimeInterval",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endTime: TimeInterval",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var amountOfDaysAfterEventStart: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var type: AgendaType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var eventDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var forecast: ForecastEntity?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var temporaryLocation: LocationEntity?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var hasLocationChanged: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var displayedLocation: LocationEntity",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var amountOfDaysAfterEventStartTimeInterval: TimeInterval",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var startDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let begginingOfDayDate: Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let begginingOfDayDate: Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var timeZone: TimeZone?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let coordinate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isDateSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "shouldUpdateForecast() -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isViableForForecastUpdate() -> Bool",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "copy() -> Any",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isEqual(_ object: Any?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(with dataDict: [String: Any], id: String?, ownerId: String?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(with event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(as type: AgendaType, with event: EventEntity, agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(asSunriseWith event: EventEntity, agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(asSunsetWith event: EventEntity, agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(asTimeZoneWith agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(asStartingLocationWith location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "AgendaEntity",
  "superClass": 256
},{
  "id": 249,
  "typeString": "class",
  "properties": [
    {
  "name": "var title: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var image: UIImage?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isSelected",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var assetFetchResult: PHFetchResult<PHAsset>?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var photoCount: Int?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "PhotoAlbumEntity"
},{
  "id": 250,
  "typeString": "class",
  "properties": [
    {
  "name": "var localIdentifier: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var image: UIImage",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isSelected: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "toggleSelectedState()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withLocalIdentifier identifier: String, image: UIImage)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "PhotoEntity"
},{
  "id": 251,
  "typeString": "enum",
  "properties": [
    {
  "name": "var cellImage: UIImage?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var detailImage: UIImage?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var localizedName: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "cases": [
    {
  "name": "portrait"
},
    {
  "name": "wedding case landscape case architecture case family case fashion case couples case other var cellImage"
}
  ],
  "name": "EventType",
  "superClass": 255
},{
  "id": 252,
  "typeString": "class",
  "properties": [
    {
  "name": "var id: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var title: String?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var type: EventType",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var location",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var startDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var timeZone: TimeZone?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let coordinate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dateString: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let eventDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var daysTillEventStarts: Int?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let eventDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var hasStarted: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let eventDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isUpcoming: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let endDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let startDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var canHaveForecast: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isDateSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var dataDict: [String: Any]",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "copy() -> Any",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isEqual(_ object: Any?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init?(with dataDict: [String: Any], id: String?, ownerId: String? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "init(withLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "EventEntity",
  "superClass": 256
},{
  "id": 254,
  "typeString": "class",
  "properties": [
    {
  "name": "var id: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var name: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var description: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "init(withAutocompletePrediction autocompletePrediction: GMSAutocompletePrediction)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "name": "LocationPredictionEntity"
},{
  "id": 255,
  "typeString": "class",
  "name": "Int"
},{
  "id": 256,
  "typeString": "class",
  "name": "NSObject"
},{
  "id": 257,
  "typeString": "class",
  "name": "Error",
  "extensions": [
    28
  ]
},{
  "id": 258,
  "typeString": "class",
  "name": "CustomStringConvertible"
},{
  "id": 259,
  "typeString": "class",
  "name": "class"
},{
  "id": 260,
  "typeString": "class",
  "name": "BaseViewController"
},{
  "id": 261,
  "typeString": "protocol",
  "name": "UITableViewDelegate"
},{
  "id": 262,
  "typeString": "protocol",
  "name": "UITableViewDataSource"
},{
  "id": 263,
  "typeString": "class",
  "name": "UITableViewCell"
},{
  "id": 264,
  "typeString": "class",
  "name": "BaseListViewController"
},{
  "id": 265,
  "typeString": "class",
  "name": "UIViewController",
  "extensions": [
    19,
    20
  ]
},{
  "id": 266,
  "typeString": "class",
  "name": "UIView",
  "extensions": [
    7,
    8
  ]
},{
  "id": 267,
  "typeString": "class",
  "name": "UICollectionViewCell"
},{
  "id": 268,
  "typeString": "class",
  "name": "BaseButtonBarPagerTabStripViewController<EventsTabCell>"
},{
  "id": 269,
  "typeString": "class",
  "name": "BaseDetailsViewController"
},{
  "id": 270,
  "typeString": "class",
  "name": "BaseEditViewController"
},{
  "id": 271,
  "typeString": "protocol",
  "name": "UINavigationControllerDelegate"
},{
  "id": 272,
  "typeString": "class",
  "name": "UITabBarController"
},{
  "id": 273,
  "typeString": "class",
  "name": "UITableViewHeaderFooterView"
},{
  "id": 274,
  "typeString": "class",
  "name": "UIResponder"
},{
  "id": 275,
  "typeString": "protocol",
  "name": "UIApplicationDelegate"
},{
  "id": 276,
  "typeString": "class",
  "name": "UIImage",
  "extensions": [
    1
  ]
},{
  "id": 277,
  "typeString": "class",
  "name": "UIButton",
  "extensions": [
    2
  ]
},{
  "id": 278,
  "typeString": "class",
  "name": "UIColor",
  "extensions": [
    4
  ]
},{
  "id": 279,
  "typeString": "class",
  "name": "Array",
  "extensions": [
    9,
    10,
    13,
    25,
    241,
    248,
    253
  ]
},{
  "id": 280,
  "typeString": "class",
  "name": "NSArray",
  "extensions": [
    11,
    14
  ]
},{
  "id": 281,
  "typeString": "class",
  "name": "NSMutableArray",
  "extensions": [
    12
  ]
},{
  "id": 282,
  "typeString": "class",
  "name": "UIFont",
  "extensions": [
    15
  ]
},{
  "id": 283,
  "typeString": "class",
  "name": "Date",
  "extensions": [
    16
  ]
},{
  "id": 284,
  "typeString": "class",
  "name": "UINavigationItem",
  "extensions": [
    17
  ]
},{
  "id": 285,
  "typeString": "class",
  "name": "UICollectionView",
  "extensions": [
    18
  ]
},{
  "id": 286,
  "typeString": "class",
  "name": "UINavigationController",
  "extensions": [
    21
  ]
},{
  "id": 287,
  "typeString": "class",
  "name": "UITableView",
  "extensions": [
    22
  ]
},{
  "id": 288,
  "typeString": "class",
  "name": "CLLocationCoordinate2D",
  "extensions": [
    23
  ]
},{
  "id": 289,
  "typeString": "protocol",
  "name": "Equatable"
},{
  "id": 290,
  "typeString": "class",
  "name": "String",
  "extensions": [
    24
  ]
},{
  "id": 291,
  "typeString": "class",
  "name": "Optional",
  "extensions": [
    26
  ]
},{
  "id": 292,
  "typeString": "class",
  "name": "Notification",
  "extensions": [
    45,
    53,
    202
  ]
},{
  "id": 293,
  "typeString": "class",
  "name": "NotificationCenter",
  "extensions": [
    46
  ]
},{
  "id": 294,
  "typeString": "protocol",
  "name": "CLLocationManagerDelegate"
},{
  "id": 1,
  "typeString": "extension",
  "methods": [
    {
  "name": "imageScaledToSize(_ newSize: CGSize) -> UIImage",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "originalImageWithName(_ name: String) -> UIImage",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "imageWithTint(color: UIColor) -> UIImage",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "drawText(_ text: NSString, withFont font: UIFont) -> UIImage",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "drawText(_ text: NSString, atPoint point: CGPoint, withFont font: UIFont) -> UIImage",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 2,
  "typeString": "extension",
  "methods": [
    {
  "name": "centerVerticallyWithPadding(_ padding: CGFloat)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 4,
  "typeString": "extension",
  "properties": [
    {
  "name": "let startColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let endColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let navigationBackgroundColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let navigationBarTintColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let navigationTintColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let navigationTitleColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let menuCellElementsColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let menuCellHighlightedColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let menuBackgroundColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let menuSelectedBackgroundColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let menuSelectedCellElementsColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let mainTextColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let primaryColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let secondaryColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let darkRedColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let coldPink",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let cellSeparatorLineColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let tabBarSeparatorColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let descriptionGrayColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let serviceGreenColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let serviceRedColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let keyboardGrayColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let lightGrayFontColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaListSectionBackgroundColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dropShadowColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let dimGray",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let gray",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let appLightGray",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let backgroundGray",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let darkGrayColor",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let darkYellow",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let darkOrange",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let darkPink",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientDayColor_leftStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientDayColor_leftEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientDayColor_rightStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientDayColor_rightEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientCloudyColor_leftStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientCloudyColor_leftEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientCloudyColor_rightStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientCloudyColor_rightEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientNightColor_leftStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientNightColor_leftEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientNightColor_rightStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientNightColor_rightEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientEmptyColor_leftStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientEmptyColor_leftEnd",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientEmptyColor_rightStart",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "let agendaGradientEmptyColor_rightEnd",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "color(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat = 1.0) -> UIColor",
  "type": "type",
  "accessLevel": "internal"
}
  ]
},{
  "id": 7,
  "typeString": "extension",
  "properties": [
    {
  "name": "var className: String",
  "type": "type",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "roundCorners(withRadius radius: CGFloat)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dropShadow( radius: CGFloat = 3.0, color: UIColor = .dropShadowColor, opacity: Float = 0.3, offset: CGSize = CGSize(width: 0, height: 3))",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "hideShadow()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "applyGradient(_ gradientInfo: GradientInfo = Constants.UIDefaults.gradient)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "colorForViewWithGradient(_ gradientInfo: GradientInfo = Constants.UIDefaults.gradient) -> UIColor",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "imageForViewWithGradient(_ gradientInfo: GradientInfo = Constants.UIDefaults.gradient) -> UIImage?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "gradientLayerFromGradientInfo(_ gradientInfo: GradientInfo) -> CAGradientLayer",
  "type": "instance",
  "accessLevel": "private"
}
  ]
},{
  "id": 8,
  "typeString": "extension",
  "methods": [
    {
  "name": "fromNib<T: UIView>() -> T?",
  "type": "type",
  "accessLevel": "internal"
}
  ]
},{
  "id": 9,
  "typeString": "extension",
  "properties": [
    {
  "name": "var localized: [String]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var localizedList: [String]",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 10,
  "typeString": "extension",
  "properties": [
    {
  "name": "var lastIndex: Int",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "itemAtIndex(_ index: Int) -> Any?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "tryAddObject(_ object: Any?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 11,
  "typeString": "extension",
  "methods": [
    {
  "name": "itemAtIndex(_ index: Int) -> Any?",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 12,
  "typeString": "extension",
  "methods": [
    {
  "name": "tryAddObject(_ object: Any?) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 13,
  "typeString": "extension",
  "methods": [
    {
  "name": "nextListItemWithIndex(_ index: Int) -> Any?",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 14,
  "typeString": "extension",
  "methods": [
    {
  "name": "nextListItemWithIndex(_ index: Int) -> Any?",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 15,
  "typeString": "extension",
  "methods": [
    {
  "name": "defaultBoldAppFontWithSize(_ fontSize: CGFloat) -> UIFont",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "defaultBookAppFontWithSize(_ fontSize: CGFloat) -> UIFont",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "defaultMediumAppFontWithSize(_ fontSize: CGFloat) -> UIFont",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "defaultLightAppFontWithSize(_ fontSize: CGFloat) -> UIFont",
  "type": "type",
  "accessLevel": "internal"
},
    {
  "name": "defaultFontWithName(_ fontName: String, fontSize: CGFloat) -> UIFont",
  "type": "type",
  "accessLevel": "private"
}
  ]
},{
  "id": 16,
  "typeString": "extension",
  "properties": [
    {
  "name": "var isNotInPast: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var endOfDayDate: Date",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "midday() -> Date",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "daysCountToDate(_ date: Date) -> Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isBetweenDate(_ beginDate: Date, andDate endDate: Date) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "isNight(atCoordinate coordinate: CLLocationCoordinate2D) -> Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "dateWithSpecifiedTime(hours: Int, minutes: Int, seconds: Int) -> Date",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 17,
  "typeString": "extension",
  "methods": [
    {
  "name": "offsetRightBarButtonBy(_ offset: CGFloat)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "offsetLeftBarButtonBy(_ offset: CGFloat)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "offsetRightBarButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "offsetLeftBarButton()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "spacerButtonWithWidth(_ buttonWidth: CGFloat) -> UIBarButtonItem",
  "type": "instance",
  "accessLevel": "private"
}
  ]
},{
  "id": 18,
  "typeString": "extension",
  "methods": [
    {
  "name": "registerForReuse(collectionViewCellType: UICollectionViewCell.Type)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 19,
  "typeString": "extension",
  "properties": [
    {
  "name": "var adjustableScrollView: UIScrollView? @objc @objc",
  "type": "type",
  "accessLevel": "private"
}
  ],
  "methods": [
    {
  "name": "updateContentInsetByKeyboardFor(scrollView: UIScrollView?)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "startMonitoringKeyboardNotifications()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "stopMonitoringKeyboardNotifications()",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "keyboardWillShow(_ notification: NSNotification)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "keyboardWillHide(_ notification: NSNotification)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "updateScrollViewInset(withHeight height: CGFloat)",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "keyboardHeightFrom(informationDictionary: [AnyHashable: Any]) -> CGFloat",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "animationDurationFrom(informationDictionary: [AnyHashable: Any]) -> TimeInterval",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "animationOptionsFrom(informationDictionary: [AnyHashable: Any]) -> UIView.AnimationOptions",
  "type": "instance",
  "accessLevel": "private"
},
    {
  "name": "keyboardAnimationWith(animationCurve: UIView.AnimationCurve) -> UIView.AnimationOptions",
  "type": "instance",
  "accessLevel": "private"
}
  ]
},{
  "id": 20,
  "typeString": "extension",
  "properties": [
    {
  "name": "var className: String",
  "type": "type",
  "accessLevel": "internal"
}
  ]
},{
  "id": 21,
  "typeString": "extension",
  "properties": [
    {
  "name": "var preferredStatusBarStyle: UIStatusBarStyle",
  "type": "instance",
  "accessLevel": "open"
}
  ]
},{
  "id": 22,
  "typeString": "extension",
  "methods": [
    {
  "name": "registerForReuse(tableViewCellType: UITableViewCell.Type)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "registerForReuse(headerFooterViewType: UITableViewHeaderFooterView.Type)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 23,
  "typeString": "extension",
  "methods": [
    {
  "name": "== (lhs: CLLocationCoordinate2D, rhs: CLLocationCoordinate2D) -> Bool",
  "type": "type",
  "accessLevel": "public"
}
  ],
  "protocols": [
    289
  ]
},{
  "id": 24,
  "typeString": "extension",
  "properties": [
    {
  "name": "var firstCapitalized: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var localized: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isValidAsEmail: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let emailRegEx",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let emailTest",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isValidAsPassword: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "attributedString(withUrlString urlString: String, onHighlightedSubstring substring: String) -> NSAttributedString",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 25,
  "typeString": "extension",
  "methods": [
    {
  "name": "joinedExcludingEmpty(separator: String) -> String",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 26,
  "typeString": "extension",
  "properties": [
    {
  "name": "var isNilOrEmpty: Bool",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 28,
  "typeString": "extension",
  "properties": [
    {
  "name": "var code: Int",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var type: ErrorType",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 29,
  "typeString": "extension",
  "properties": [
    {
  "name": "var kMapStyle: String",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 41,
  "typeString": "extension",
  "properties": [
    {
  "name": "var isReachable: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isReachableViaWWAN: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isReachableViaWiFi: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var description: String",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let W",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let R",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let c",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let t",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let i",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let C",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let D",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let l",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let d",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "startNotifier() throws",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "stopNotifier()",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 42,
  "typeString": "extension",
  "properties": [
    {
  "name": "var isOnWWANFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isReachableFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isConnectionRequiredFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isInterventionRequiredFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isConnectionOnTrafficFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isConnectionOnDemandFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isConnectionOnTrafficOrDemandFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isTransientConnectionFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isLocalAddressFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isDirectFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var isConnectionRequiredAndTransientFlagSet: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var flags: SCNetworkReachabilityFlags",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var flags",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "methods": [
    {
  "name": "reachabilityChanged()",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 44,
  "typeString": "extension",
  "properties": [
    {
  "name": "var name: Notification.Name",
  "type": "type",
  "accessLevel": "internal"
}
  ]
},{
  "id": 45,
  "typeString": "extension",
  "methods": [
    {
  "name": "data<T: NotificationPostable>() -> T?",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 46,
  "typeString": "extension",
  "methods": [
    {
  "name": "post(_ postable: NotificationPostable, sender: Any? = nil)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 47,
  "typeString": "extension",
  "methods": [
    {
  "name": "notification(sender: Any?) -> Notification",
  "type": "instance",
  "accessLevel": "fileprivate"
}
  ]
},{
  "id": 53,
  "typeString": "extension",
  "properties": [
    {
  "name": "let units: UnitsEntity }",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let location: LocationEntity }",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 63,
  "typeString": "extension",
  "methods": [
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgendaList agendaList: [AgendaEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, loadedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "agendaRepository(_ repository: AgendaRepository, deletedAgenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 66,
  "typeString": "extension",
  "methods": [
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNoteList noteList: [NoteEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, loadedNote note: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "noteRepository(_ repository: NoteRepository, deletedNoteWithId id: NoteEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 71,
  "typeString": "extension",
  "methods": [
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEventList eventList: [EventEntity])",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "eventRepository(_ repostory: EventRepository, loadedEvent event: EventEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 114,
  "typeString": "extension",
  "methods": [
    {
  "name": "datePickerViewController(didClearDate viewController: DatePickerViewController)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 152,
  "typeString": "extension",
  "methods": [
    {
  "name": "sunCalculatorMapView(_ sender: SunCalculatorMapView, didUpdateLocation location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sunCalculatorMapView(locationServiceUnavailableFor: SunCalculatorMapView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "configuredSunMapView() -> SunCalculatorMapView?",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    229
  ]
},{
  "id": 153,
  "typeString": "extension",
  "methods": [
    {
  "name": "agendaDataModel(_ dataModel: AgendaDataModel, loadedAgenda agenda: AgendaEntity)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    150
  ]
},{
  "id": 198,
  "typeString": "extension",
  "methods": [
    {
  "name": "presentViewControllerOverCurrentContext(_ viewController: UIViewController?, animated: Bool, completion: (() -> ())? = nil)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "topViewController() -> UIViewController?",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 202,
  "typeString": "extension"
},{
  "id": 203,
  "typeString": "extension",
  "methods": [
    {
  "name": "openUrl(with urlString: String)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 217,
  "typeString": "extension",
  "methods": [
    {
  "name": "inputSingleLineCell(didBeginEnteringText cell: InputSingleLineCell)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 226,
  "typeString": "extension",
  "methods": [
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didUpdate location: LocationEntity)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(locationServiceUnavailableFor mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didChangeZoom: Float)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    234
  ]
},{
  "id": 227,
  "typeString": "extension",
  "methods": [
    {
  "name": "locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus)",
  "type": "instance",
  "accessLevel": "internal"
}
  ],
  "protocols": [
    294
  ]
},{
  "id": 237,
  "typeString": "extension",
  "methods": [
    {
  "name": "mapContainerView(_ mapContainerView: MapContainerView, didChangeZoom: Float)",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "mapContainerView(wasInteractedWith mapContainerView: MapContainerView)",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 241,
  "typeString": "extension",
  "methods": [
    {
  "name": "sortedByCreationDate(_ order: ComparisonResult) -> [NoteEntity]",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 248,
  "typeString": "extension",
  "properties": [
    {
  "name": "var shouldCalculateSunriseAndSunset: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var hasTimeZoneDifference: Bool",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let timeZoneList: [TimeZone]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let timeZoneSet",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var latestEndDate: Date?",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let firstAgenda",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let lastAgenda",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let leftDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "let rightDate",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "var sortedByStartTimeAscending: [AgendaEntity]",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
},{
  "id": 253,
  "typeString": "extension",
  "methods": [
    {
  "name": "filteredAndSorted(by type: EventListType) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sorted(isOrderAscending isAscending: Bool) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "sorted(by type: EventListType) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "internal"
},
    {
  "name": "filtered(by type: EventListType) -> [EventEntity]",
  "type": "instance",
  "accessLevel": "internal"
}
  ]
}] 